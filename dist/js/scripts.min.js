"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _regeneratorRuntime(){_regeneratorRuntime=function(){return a};var a={},e=Object.prototype,c=e.hasOwnProperty,l=Object.defineProperty||function(e,t,n){e[t]=n.value},t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",n=t.asyncIterator||"@@asyncIterator",o=t.toStringTag||"@@toStringTag";function i(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{i({},"")}catch(e){i=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var o,i,a,s,t=t&&t.prototype instanceof d?t:d,t=Object.create(t.prototype),r=new w(r||[]);return l(t,"_invoke",{value:(o=e,i=n,a=r,s="suspendedStart",function(e,t){if("executing"===s)throw new Error("Generator is already running");if("completed"===s){if("throw"===e)throw t;return O()}for(a.method=e,a.arg=t;;){var n=a.delegate;if(n){n=function e(t,n){var r=n.method,o=t.iterator[r];if(void 0===o)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=void 0,e(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),f;r=u(o,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,f;o=r.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}(n,a);if(n){if(n===f)continue;return n}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if("suspendedStart"===s)throw s="completed",a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);s="executing";n=u(o,i,a);if("normal"===n.type){if(s=a.done?"completed":"suspendedYield",n.arg===f)continue;return{value:n.arg,done:a.done}}"throw"===n.type&&(s="completed",a.method="throw",a.arg=n.arg)}})}),t}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}a.wrap=s;var f={};function d(){}function p(){}function h(){}var t={},m=(i(t,r,function(){return this}),Object.getPrototypeOf),m=m&&m(m(k([]))),g=(m&&m!==e&&c.call(m,r)&&(t=m),h.prototype=d.prototype=Object.create(t));function v(e){["next","throw","return"].forEach(function(t){i(e,t,function(e){return this._invoke(t,e)})})}function y(a,s){var t;l(this,"_invoke",{value:function(n,r){function e(){return new s(function(e,t){!function t(e,n,r,o){var i,e=u(a[e],a,n);if("throw"!==e.type)return(n=(i=e.arg).value)&&"object"==_typeof(n)&&c.call(n,"__await")?s.resolve(n.__await).then(function(e){t("next",e,r,o)},function(e){t("throw",e,r,o)}):s.resolve(n).then(function(e){i.value=e,r(i)},function(e){return t("throw",e,r,o)});o(e.arg)}(n,r,e,t)})}return t=t?t.then(e,e):e()}})}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function b(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function w(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function k(t){if(t){var n,e=t[r];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length))return n=-1,(e=function e(){for(;++n<t.length;)if(c.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e}).next=e}return{next:O}}function O(){return{value:void 0,done:!0}}return l(g,"constructor",{value:p.prototype=h,configurable:!0}),l(h,"constructor",{value:p,configurable:!0}),p.displayName=i(h,o,"GeneratorFunction"),a.isGeneratorFunction=function(e){e="function"==typeof e&&e.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},a.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,i(e,o,"GeneratorFunction")),e.prototype=Object.create(g),e},a.awrap=function(e){return{__await:e}},v(y.prototype),i(y.prototype,n,function(){return this}),a.AsyncIterator=y,a.async=function(e,t,n,r,o){void 0===o&&(o=Promise);var i=new y(s(e,t,n,r),o);return a.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},v(g),i(g,o,"Generator"),i(g,r,function(){return this}),i(g,"toString",function(){return"[object Generator]"}),a.keys=function(e){var t,n=Object(e),r=[];for(t in n)r.push(t);return r.reverse(),function e(){for(;r.length;){var t=r.pop();if(t in n)return e.value=t,e.done=!1,e}return e.done=!0,e}},a.values=k,w.prototype={constructor:w,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(b),!e)for(var t in this)"t"===t.charAt(0)&&c.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var r=this;function e(e,t){return i.type="throw",i.arg=n,r.next=e,t&&(r.method="next",r.arg=void 0),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var o=this.tryEntries[t],i=o.completion;if("root"===o.tryLoc)return e("end");if(o.tryLoc<=this.prev){var a=c.call(o,"catchLoc"),s=c.call(o,"finallyLoc");if(a&&s){if(this.prev<o.catchLoc)return e(o.catchLoc,!0);if(this.prev<o.finallyLoc)return e(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return e(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return e(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;0<=n;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&c.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}var i=(o=o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc?null:o)?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),b(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n,r,o=this.tryEntries[t];if(o.tryLoc===e)return"throw"===(n=o.completion).type&&(r=n.arg,b(o)),r}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:k(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},a}function asyncGeneratorStep(e,t,n,r,o,i,a){try{var s=e[i](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,o)}function _asyncToGenerator(s){return function(){var e=this,a=arguments;return new Promise(function(t,n){var r=s.apply(e,a);function o(e){asyncGeneratorStep(r,t,n,o,i,"next",e)}function i(e){asyncGeneratorStep(r,t,n,o,i,"throw",e)}o(void 0)})}}var headerBtn=document.querySelector(".header__btn-login"),modalLoginBtnDone=document.querySelector(".modal-login__btn-done"),modalLoginBtnClose=document.querySelector(".modal-login__btn-close"),token="";function headerLogin(){document.querySelector(".modal-login").classList.remove("invisible")}function modalDoneBtn(){return _modalDoneBtn.apply(this,arguments)}function _modalDoneBtn(){return(_modalDoneBtn=_asyncToGenerator(_regeneratorRuntime().mark(function e(){var t,n,r,o;return _regeneratorRuntime().wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=document.querySelector(".modal-login"),n=document.querySelector("#loginEmail").value,r=document.querySelector("#loginPassword").value,o=document.querySelector(".header__text"),e.next=6,fetch("https://ajax.test-danit.com/api/v2/cards/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:"".concat(n),password:"".concat(r)})}).then(function(e){if(!(400<=e.status))return o.innerHTML="Вітаємо, ви зайшли в акаунт ".concat(n,"!"),t.classList.add("invisible"),e.text();e=document.querySelector("#emailHelp");e.style.color="red",e.innerHTML="Incorrect username or password!"}).then(function(e){sessionStorage.setItem("token",e)});case 6:case"end":return e.stop()}},e)}))).apply(this,arguments)}function modalCloseBtn(){document.querySelector(".modal-login").classList.add("invisible")}function _get(){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=_superPropBase(e,t);if(r)return(r=Object.getOwnPropertyDescriptor(r,t)).get?r.get.call(arguments.length<3?e:n):r.value}).apply(this,arguments)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function _createSuper(n){var r=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(n);return _possibleConstructorReturn(this,r?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments))}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ownKeys(t,e){var n,r=Object.keys(t);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(t),e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)),r}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(Object(n),!0).forEach(function(e){_defineProperty(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ownKeys(Object(n)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function _defineProperty(e,t,n){return(t=_toPropertyKey(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){e=_toPrimitive(e,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0===n)return("string"===t?String:Number)(e);n=n.call(e,t||"default");if("object"!==_typeof(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,s=[],c=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=i.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){l=!0,o=e}finally{try{if(!c&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _createForOfIteratorHelper(e,t){var n,r,o,i,a="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(a)return r=!(n=!0),{s:function(){a=a.call(e)},n:function(){var e=a.next();return n=e.done,e},e:function(e){r=!0,o=e},f:function(){try{n||null==a.return||a.return()}finally{if(r)throw o}}};if(Array.isArray(e)||(a=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length)return a&&(e=a),i=0,{s:t=function(){},n:function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}},e:function(e){throw e},f:t};throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){var n;if(e)return"string"==typeof e?_arrayLikeToArray(e,t):"Map"===(n="Object"===(n=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:n)||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}headerBtn.onclick=headerLogin,modalLoginBtnDone.onclick=modalDoneBtn,modalLoginBtnClose.onclick=modalCloseBtn,function(e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):("undefined"!=typeof globalThis?globalThis:self).bootstrap=e()}(function(){function M(e){return(e=Y(e))&&document.querySelector(e)?e:null}function a(e){return(e=Y(e))?document.querySelector(e):null}function H(e){e.dispatchEvent(new Event(K))}function s(e){return u(e)?e.jquery?e[0]:e:"string"==typeof e&&0<e.length?document.querySelector(e):null}function o(e){if(!u(e)||0===e.getClientRects().length)return!1;var t="visible"===getComputedStyle(e).getPropertyValue("visibility"),n=e.closest("details:not([open])");if(n&&n!==e){e=e.closest("summary");if(e&&e.parentNode!==n)return!1;if(null===e)return!1}return t}function i(e){return!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled"))}function F(e){var t;return document.documentElement.attachShadow?"function"==typeof e.getRootNode?(t=e.getRootNode())instanceof ShadowRoot?t:null:e instanceof ShadowRoot?e:e.parentNode?F(e.parentNode):null:null}function B(){}function R(e){e.offsetHeight}function q(){return window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null}function c(){return"rtl"===document.documentElement.dir}function e(r){var e;e=function(){var e,t,n=q();n&&(e=r.NAME,t=n.fn[e],n.fn[e]=r.jQueryInterface,n.fn[e].Constructor=r,n.fn[e].noConflict=function(){return n.fn[e]=t,r.jQueryInterface})},"loading"===document.readyState?(U.length||document.addEventListener("DOMContentLoaded",function(){for(var e=0,t=U;e<t.length;e++)(0,t[e])()}),U.push(e)):e()}function l(e){"function"==typeof e&&e()}function W(n,r){var e,t,o,i,a;2<arguments.length&&void 0!==arguments[2]&&!arguments[2]?l(n):(o=5+((e=r)&&(t=(e=window.getComputedStyle(e)).transitionDuration,e=e.transitionDelay,o=Number.parseFloat(t),i=Number.parseFloat(e),o||i)?(t=t.split(",")[0],e=e.split(",")[0],(Number.parseFloat(t)+Number.parseFloat(e))*V):0),a=!1,r.addEventListener(K,function e(t){t.target===r&&(a=!0,r.removeEventListener(K,e),l(n))}),setTimeout(function(){a||H(r)},o))}function z(e,t,n,r){var o=e.length;return-1===(t=e.indexOf(t))?!n&&r?e[o-1]:e[0]:(t+=n?1:-1,r&&(t=(t+o)%o),e[Math.max(0,Math.min(t,o-1))])}var V=1e3,K="transitionend",Y=function(e){var t=e.getAttribute("data-bs-target");if(!t||"#"===t){e=e.getAttribute("href");if(!e||!e.includes("#")&&!e.startsWith("."))return null;t=(e=e.includes("#")&&!e.startsWith("#")?"#".concat(e.split("#")[1]):e)&&"#"!==e?e.trim():null}return t},u=function(e){return!(!e||"object"!==_typeof(e))&&void 0!==(e=void 0!==e.jquery?e[0]:e).nodeType},U=[],G=/[^.]*(?=\..*)\.|.*/,X=/\..*/,Q=/::\d+$/,$={},J=1,Z={mouseenter:"mouseover",mouseleave:"mouseout"},ee=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function te(e,t){return t&&"".concat(t,"::").concat(J++)||e.uidEvent||J++}function ne(e){var t=te(e);return e.uidEvent=t,$[t]=$[t]||{},$[t]}function re(e,t,n){var r=2<arguments.length&&void 0!==n?n:null;return Object.values(e).find(function(e){return e.callable===t&&e.delegationSelector===r})}function oe(e,t,n){var r="string"==typeof t,t=!r&&t||n,n=se(e);return[r,t,n=ee.has(n)?n:e]}function ie(e,t,n,r,o){var i,a,s,c,l,u,f,d,p,h;"string"==typeof t&&e&&(i=(r=_slicedToArray(oe(t,n,r),3))[0],a=r[1],r=r[2],t in Z&&(s=a,a=function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return s.call(this,e)}),(l=re(c=(c=ne(e))[r]||(c[r]={}),a,i?n:null))?l.oneOff=l.oneOff&&o:(l=te(a,t.replace(G,"")),(t=i?(d=e,p=n,h=a,function e(t){for(var n=d.querySelectorAll(p),r=t.target;r&&r!==this;r=r.parentNode){var o,i=_createForOfIteratorHelper(n);try{for(i.s();!(o=i.n()).done;){var a=o.value;if(a===r)return ce(t,{delegateTarget:r}),e.oneOff&&m.off(d,t.type,p,h),h.apply(r,[t])}}catch(e){i.e(e)}finally{i.f()}}}):(u=e,f=a,function e(t){return ce(t,{delegateTarget:u}),e.oneOff&&m.off(u,t.type,f),f.apply(u,[t])})).delegationSelector=i?n:null,t.callable=a,t.oneOff=o,c[t.uidEvent=l]=t,e.addEventListener(r,t,i)))}function ae(e,t,n,r,o){r=re(t[n],r,o);r&&(e.removeEventListener(n,r,Boolean(o)),delete t[n][r.uidEvent])}function se(e){return e=e.replace(X,""),Z[e]||e}var m={on:function(e,t,n,r){ie(e,t,n,r,!1)},one:function(e,t,n,r){ie(e,t,n,r,!0)},off:function(e,t,n,r){if("string"==typeof t&&e){var r=_slicedToArray(oe(t,n,r),3),o=r[0],i=r[1],a=r[2],s=a!==t,c=ne(e),l=c[a]||{},r=t.startsWith(".");if(void 0!==i)return Object.keys(l).length?void ae(e,c,a,i,o?n:null):void 0;if(r)for(var u=0,f=Object.keys(c);u<f.length;u++)for(var d=f[u],p=(b=_=y=v=g=m=h=p=void 0,e),h=c,m=d,g=t.slice(1),v=h[m]||{},y=0,_=Object.keys(v);y<_.length;y++){var b=_[y];b.includes(g)&&ae(p,h,m,(b=v[b]).callable,b.delegationSelector)}for(var w=0,k=Object.keys(l);w<k.length;w++){var O=k[w],x=O.replace(Q,"");s&&!t.includes(x)||ae(e,c,a,(x=l[O]).callable,x.delegationSelector)}}},trigger:function(e,t,n){if("string"!=typeof t||!e)return null;var r=q(),o=null,i=!0,a=!0,s=!1;t!==se(t)&&r&&(o=r.Event(t,n),r(e).trigger(o),i=!o.isPropagationStopped(),a=!o.isImmediatePropagationStopped(),s=o.isDefaultPrevented());r=ce(r=new Event(t,{bubbles:i,cancelable:!0}),n);return s&&r.preventDefault(),a&&e.dispatchEvent(r),r.defaultPrevented&&o&&o.preventDefault(),r}};function ce(r,e){for(var o=0,i=Object.entries(e||{});o<i.length;o++)!function(){var e=_slicedToArray(i[o],2),t=e[0],n=e[1];try{r[t]=n}catch(e){Object.defineProperty(r,t,{configurable:!0,get:function(){return n}})}}();return r}var r=new Map,le=function(e,t,n){r.has(e)||r.set(e,new Map);e=r.get(e);e.has(t)||0===e.size?e.set(t,n):console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(e.keys())[0],"."))},ue=function(e,t){return r.has(e)&&r.get(e).get(t)||null},fe=function(e,t){var n;r.has(e)&&((n=r.get(e)).delete(t),0===n.size)&&r.delete(e)};function de(t){if("true"===t)return!0;if("false"===t)return!1;if(t===Number(t).toString())return Number(t);if(""===t||"null"===t)return null;if("string"!=typeof t)return t;try{return JSON.parse(decodeURIComponent(t))}catch(e){return t}}function pe(e){return e.replace(/[A-Z]/g,function(e){return"-".concat(e.toLowerCase())})}function he(t){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"hide",e="click.dismiss".concat(t.EVENT_KEY),r=t.NAME;m.on(document,e,'[data-bs-dismiss="'.concat(r,'"]'),function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),i(this)||(e=a(this)||this.closest(".".concat(r)),t.getOrCreateInstance(e)[n]())})}var me=function(e,t,n){e.setAttribute("data-bs-".concat(pe(t)),n)},ge=function(e,t){e.removeAttribute("data-bs-".concat(pe(t)))},ve=function(e){if(!e)return{};var t,n={},r=_createForOfIteratorHelper(Object.keys(e.dataset).filter(function(e){return e.startsWith("bs")&&!e.startsWith("bsConfig")}));try{for(r.s();!(t=r.n()).done;){var o=t.value,i=o.replace(/^bs/,"");n[i=i.charAt(0).toLowerCase()+i.slice(1,i.length)]=de(e.dataset[o])}}catch(e){r.e(e)}finally{r.f()}return n},ye=function(e,t){return de(e.getAttribute("data-bs-".concat(pe(t))))},_e=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"_getConfig",value:function(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}},{key:"_configAfterMerge",value:function(e){return e}},{key:"_mergeConfigObj",value:function(e,t){var n=u(t)?ye(t,"config"):{};return _objectSpread(_objectSpread(_objectSpread(_objectSpread({},this.constructor.Default),"object"===_typeof(n)?n:{}),u(t)?ve(t):{}),"object"===_typeof(e)?e:{})}},{key:"_typeCheckConfig",value:function(e){for(var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.constructor.DefaultType,n=0,r=Object.keys(t);n<r.length;n++){var o=r[n],i=t[o],a=e[o],a=u(a)?"element":null==(a=a)?"".concat(a):Object.prototype.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(i).test(a))throw new TypeError("".concat(this.constructor.NAME.toUpperCase(),': Option "').concat(o,'" provided type "').concat(a,'" but expected type "').concat(i,'".'))}}}],[{key:"Default",get:function(){return{}}},{key:"DefaultType",get:function(){return{}}},{key:"NAME",get:function(){throw new Error('You have to implement the static method "NAME", for each component!')}}]),e}(),t=function(){_inherits(o,_e);var r=_createSuper(o);function o(e,t){var n;return _classCallCheck(this,o),n=r.call(this),(e=s(e))?(n._element=e,n._config=n._getConfig(t),le(n._element,n.constructor.DATA_KEY,_assertThisInitialized(n)),n):_possibleConstructorReturn(n)}return _createClass(o,[{key:"dispose",value:function(){fe(this._element,this.constructor.DATA_KEY),m.off(this._element,this.constructor.EVENT_KEY);var e,t=_createForOfIteratorHelper(Object.getOwnPropertyNames(this));try{for(t.s();!(e=t.n()).done;)this[e.value]=null}catch(e){t.e(e)}finally{t.f()}}},{key:"_queueCallback",value:function(e,t){W(e,t,!(2<arguments.length&&void 0!==arguments[2])||arguments[2])}},{key:"_getConfig",value:function(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}}],[{key:"getInstance",value:function(e){return ue(s(e),this.DATA_KEY)}},{key:"getOrCreateInstance",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(e)||new this(e,"object"===_typeof(t)?t:null)}},{key:"VERSION",get:function(){return"5.2.3"}},{key:"DATA_KEY",get:function(){return"bs.".concat(this.NAME)}},{key:"EVENT_KEY",get:function(){return".".concat(this.DATA_KEY)}},{key:"eventName",value:function(e){return"".concat(e).concat(this.EVENT_KEY)}}]),o}(),be=".".concat("bs.alert"),we="close".concat(be),ke="closed".concat(be),be=function(){_inherits(n,t);var e=_createSuper(n);function n(){return _classCallCheck(this,n),e.apply(this,arguments)}return _createClass(n,[{key:"close",value:function(){var e,t=this;m.trigger(this._element,we).defaultPrevented||(this._element.classList.remove("show"),e=this._element.classList.contains("fade"),this._queueCallback(function(){return t._destroyElement()},this._element,e))}},{key:"_destroyElement",value:function(){this._element.remove(),m.trigger(this._element,ke),this.dispose()}}],[{key:"NAME",get:function(){return"alert"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=n.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError('No method named "'.concat(t,'"'));e[t](this)}})}}]),n}(),n=(he(be,"close"),e(be),".".concat("bs.button")),Oe='[data-bs-toggle="button"]',n="click".concat(n).concat(".data-api"),xe=function(){_inherits(n,t);var e=_createSuper(n);function n(){return _classCallCheck(this,n),e.apply(this,arguments)}return _createClass(n,[{key:"toggle",value:function(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}}],[{key:"NAME",get:function(){return"button"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=n.getOrCreateInstance(this);"toggle"===t&&e[t]()})}}]),n}(),f=(m.on(document,n,Oe,function(e){e.preventDefault();e=e.target.closest(Oe);xe.getOrCreateInstance(e).toggle()}),e(xe),{find:function(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return(t=[]).concat.apply(t,_toConsumableArray(Element.prototype.querySelectorAll.call(n,e)))},findOne:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return Element.prototype.querySelector.call(t,e)},children:function(e,t){var n;return(n=[]).concat.apply(n,_toConsumableArray(e.children)).filter(function(e){return e.matches(t)})},parents:function(e,t){for(var n=[],r=e.parentNode.closest(t);r;)n.push(r),r=r.parentNode.closest(t);return n},prev:function(e,t){for(var n=e.previousElementSibling;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next:function(e,t){for(var n=e.nextElementSibling;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren:function(e){var t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map(function(e){return"".concat(e,':not([tabindex^="-"])')}).join(",");return this.find(t,e).filter(function(e){return!i(e)&&o(e)})}}),d=".bs.swipe",Ae="touchstart".concat(d),Ce="touchmove".concat(d),Ee="touchend".concat(d),Te="pointerdown".concat(d),Se="pointerup".concat(d),Le={endCallback:null,leftCallback:null,rightCallback:null},je={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"},Pe=function(){_inherits(o,_e);var r=_createSuper(o);function o(e,t){var n;return _classCallCheck(this,o),((n=r.call(this))._element=e)&&o.isSupported()?(n._config=n._getConfig(t),n._deltaX=0,n._supportPointerEvents=Boolean(window.PointerEvent),n._initEvents(),n):_possibleConstructorReturn(n)}return _createClass(o,[{key:"dispose",value:function(){m.off(this._element,d)}},{key:"_start",value:function(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}},{key:"_end",value:function(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),l(this._config.endCallback)}},{key:"_move",value:function(e){this._deltaX=e.touches&&1<e.touches.length?0:e.touches[0].clientX-this._deltaX}},{key:"_handleSwipe",value:function(){var e=Math.abs(this._deltaX);e<=40||(e=e/this._deltaX,this._deltaX=0,e&&l(0<e?this._config.rightCallback:this._config.leftCallback))}},{key:"_initEvents",value:function(){var t=this;this._supportPointerEvents?(m.on(this._element,Te,function(e){return t._start(e)}),m.on(this._element,Se,function(e){return t._end(e)}),this._element.classList.add("pointer-event")):(m.on(this._element,Ae,function(e){return t._start(e)}),m.on(this._element,Ce,function(e){return t._move(e)}),m.on(this._element,Ee,function(e){return t._end(e)}))}},{key:"_eventIsPointerPenTouch",value:function(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}}],[{key:"Default",get:function(){return Le}},{key:"DefaultType",get:function(){return je}},{key:"NAME",get:function(){return"swipe"}},{key:"isSupported",value:function(){return"ontouchstart"in document.documentElement||0<navigator.maxTouchPoints}}]),o}(),n=".".concat("bs.carousel"),p=".data-api",Ie="next",h="prev",De="left",Ne="right",Me="slide".concat(n),He="slid".concat(n),Fe="keydown".concat(n),Be="mouseenter".concat(n),Re="mouseleave".concat(n),qe="dragstart".concat(n),g="load".concat(n).concat(p),n="click".concat(n).concat(p),We="carousel",ze="active",Ve=".active",Ke=".carousel-item",Ye=(_defineProperty(p={},"ArrowLeft",Ne),_defineProperty(p,"ArrowRight",De),p),Ue={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Ge={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"},Xe=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){return _classCallCheck(this,r),(e=n.call(this,e,t))._interval=null,e._activeElement=null,e._isSliding=!1,e.touchTimeout=null,e._swipeHelper=null,e._indicatorsElement=f.findOne(".carousel-indicators",e._element),e._addEventListeners(),e._config.ride===We&&e.cycle(),e}return _createClass(r,[{key:"next",value:function(){this._slide(Ie)}},{key:"nextWhenVisible",value:function(){!document.hidden&&o(this._element)&&this.next()}},{key:"prev",value:function(){this._slide(h)}},{key:"pause",value:function(){this._isSliding&&H(this._element),this._clearInterval()}},{key:"cycle",value:function(){var e=this;this._clearInterval(),this._updateInterval(),this._interval=setInterval(function(){return e.nextWhenVisible()},this._config.interval)}},{key:"_maybeEnableCycle",value:function(){var e=this;this._config.ride&&(this._isSliding?m.one(this._element,He,function(){return e.cycle()}):this.cycle())}},{key:"to",value:function(e){var t,n=this,r=this._getItems();e>r.length-1||e<0||(this._isSliding?m.one(this._element,He,function(){return n.to(e)}):(t=this._getItemIndex(this._getActive()))!==e&&this._slide(t<e?Ie:h,r[e]))}},{key:"dispose",value:function(){this._swipeHelper&&this._swipeHelper.dispose(),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"_configAfterMerge",value:function(e){return e.defaultInterval=e.interval,e}},{key:"_addEventListeners",value:function(){var t=this;this._config.keyboard&&m.on(this._element,Fe,function(e){return t._keydown(e)}),"hover"===this._config.pause&&(m.on(this._element,Be,function(){return t.pause()}),m.on(this._element,Re,function(){return t._maybeEnableCycle()})),this._config.touch&&Pe.isSupported()&&this._addTouchEventListeners()}},{key:"_addTouchEventListeners",value:function(){var e,t=this,n=_createForOfIteratorHelper(f.find(".carousel-item img",this._element));try{for(n.s();!(e=n.n()).done;){var r=e.value;m.on(r,qe,function(e){return e.preventDefault()})}}catch(e){n.e(e)}finally{n.f()}this._swipeHelper=new Pe(this._element,{leftCallback:function(){return t._slide(t._directionToOrder(De))},rightCallback:function(){return t._slide(t._directionToOrder(Ne))},endCallback:function(){"hover"===t._config.pause&&(t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout(function(){return t._maybeEnableCycle()},500+t._config.interval))}})}},{key:"_keydown",value:function(e){var t;/input|textarea/i.test(e.target.tagName)||(t=Ye[e.key])&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}},{key:"_getItemIndex",value:function(e){return this._getItems().indexOf(e)}},{key:"_setActiveIndicatorElement",value:function(e){var t;this._indicatorsElement&&((t=f.findOne(Ve,this._indicatorsElement)).classList.remove(ze),t.removeAttribute("aria-current"),t=f.findOne('[data-bs-slide-to="'.concat(e,'"]'),this._indicatorsElement))&&(t.classList.add(ze),t.setAttribute("aria-current","true"))}},{key:"_updateInterval",value:function(){var e=this._activeElement||this._getActive();e&&(e=Number.parseInt(e.getAttribute("data-bs-interval"),10),this._config.interval=e||this._config.defaultInterval)}},{key:"_slide",value:function(t){var n,e,r,o,i,a,s,c=this,l=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;this._isSliding||(n=this._getActive(),e=t===Ie,(r=l||z(this._getItems(),n,e,this._config.wrap))===n)||(o=this._getItemIndex(r),(i=function(e){return m.trigger(c._element,e,{relatedTarget:r,direction:c._orderToDirection(t),from:c._getItemIndex(n),to:o})})(Me).defaultPrevented)||n&&r&&(l=Boolean(this._interval),this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(o),this._activeElement=r,a=e?"carousel-item-start":"carousel-item-end",s=e?"carousel-item-next":"carousel-item-prev",r.classList.add(s),R(r),n.classList.add(a),r.classList.add(a),this._queueCallback(function(){r.classList.remove(a,s),r.classList.add(ze),n.classList.remove(ze,s,a),c._isSliding=!1,i(He)},n,this._isAnimated()),l)&&this.cycle()}},{key:"_isAnimated",value:function(){return this._element.classList.contains("slide")}},{key:"_getActive",value:function(){return f.findOne(".active.carousel-item",this._element)}},{key:"_getItems",value:function(){return f.find(Ke,this._element)}},{key:"_clearInterval",value:function(){this._interval&&(clearInterval(this._interval),this._interval=null)}},{key:"_directionToOrder",value:function(e){return c()?e===De?h:Ie:e===De?Ie:h}},{key:"_orderToDirection",value:function(e){return c()?e===h?De:Ne:e===h?Ne:De}}],[{key:"Default",get:function(){return Ue}},{key:"DefaultType",get:function(){return Ge}},{key:"NAME",get:function(){return"carousel"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("number"==typeof t)e.to(t);else if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),r}(),p=(m.on(document,n,"[data-bs-slide], [data-bs-slide-to]",function(e){var t=a(this);t&&t.classList.contains(We)&&(e.preventDefault(),e=Xe.getOrCreateInstance(t),(t=this.getAttribute("data-bs-slide-to"))?e.to(t):"next"===ye(this,"slide")?e.next():e.prev(),e._maybeEnableCycle())}),m.on(window,g,function(){var e,t=_createForOfIteratorHelper(f.find('[data-bs-ride="carousel"]'));try{for(t.s();!(e=t.n()).done;){var n=e.value;Xe.getOrCreateInstance(n)}}catch(e){t.e(e)}finally{t.f()}}),e(Xe),".".concat("bs.collapse")),Qe="show".concat(p),$e="shown".concat(p),Je="hide".concat(p),Ze="hidden".concat(p),n="click".concat(p).concat(".data-api"),et="show",tt="collapse",nt="collapsing",rt=":scope .".concat(tt," .").concat(tt),ot='[data-bs-toggle="collapse"]',it={parent:null,toggle:!0},at={parent:"(null|element)",toggle:"boolean"},st=function(){_inherits(l,t);var c=_createSuper(l);function l(e,t){var n;_classCallCheck(this,l),(n=c.call(this,e,t))._isTransitioning=!1,n._triggerArray=[];var r,o=_createForOfIteratorHelper(f.find(ot));try{for(o.s();!(r=o.n()).done;){var i=r.value,a=M(i),s=f.find(a).filter(function(e){return e===n._element});null!==a&&s.length&&n._triggerArray.push(i)}}catch(e){o.e(e)}finally{o.f()}return n._initializeChildren(),n._config.parent||n._addAriaAndCollapsedClass(n._triggerArray,n._isShown()),n._config.toggle&&n.toggle(),n}return _createClass(l,[{key:"toggle",value:function(){this._isShown()?this.hide():this.show()}},{key:"show",value:function(){var t=this;if(!this._isTransitioning&&!this._isShown()){var e=[];if(!(e=this._config.parent?this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter(function(e){return e!==t._element}).map(function(e){return l.getOrCreateInstance(e,{toggle:!1})}):e).length||!e[0]._isTransitioning){var n=m.trigger(this._element,Qe);if(!n.defaultPrevented){var r,o=_createForOfIteratorHelper(e);try{for(o.s();!(r=o.n()).done;)r.value.hide()}catch(e){o.e(e)}finally{o.f()}var i=this._getDimension(),n=(this._element.classList.remove(tt),this._element.classList.add(nt),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0,i[0].toUpperCase()+i.slice(1)),e="scroll".concat(n);this._queueCallback(function(){t._isTransitioning=!1,t._element.classList.remove(nt),t._element.classList.add(tt,et),t._element.style[i]="",m.trigger(t._element,$e)},this._element,!0),this._element.style[i]="".concat(this._element[e],"px")}}}}},{key:"hide",value:function(){var e=this;if(!this._isTransitioning&&this._isShown()){var t=m.trigger(this._element,Je);if(!t.defaultPrevented){var n,t=this._getDimension(),r=(this._element.style[t]="".concat(this._element.getBoundingClientRect()[t],"px"),R(this._element),this._element.classList.add(nt),this._element.classList.remove(tt,et),_createForOfIteratorHelper(this._triggerArray));try{for(r.s();!(n=r.n()).done;){var o=n.value,i=a(o);i&&!this._isShown(i)&&this._addAriaAndCollapsedClass([o],!1)}}catch(e){r.e(e)}finally{r.f()}this._isTransitioning=!0;this._element.style[t]="",this._queueCallback(function(){e._isTransitioning=!1,e._element.classList.remove(nt),e._element.classList.add(tt),m.trigger(e._element,Ze)},this._element,!0)}}}},{key:"_isShown",value:function(){return(0<arguments.length&&void 0!==arguments[0]?arguments[0]:this._element).classList.contains(et)}},{key:"_configAfterMerge",value:function(e){return e.toggle=Boolean(e.toggle),e.parent=s(e.parent),e}},{key:"_getDimension",value:function(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}},{key:"_initializeChildren",value:function(){if(this._config.parent){var e,t=_createForOfIteratorHelper(this._getFirstLevelChildren(ot));try{for(t.s();!(e=t.n()).done;){var n=e.value,r=a(n);r&&this._addAriaAndCollapsedClass([n],this._isShown(r))}}catch(e){t.e(e)}finally{t.f()}}}},{key:"_getFirstLevelChildren",value:function(e){var t=f.find(rt,this._config.parent);return f.find(e,this._config.parent).filter(function(e){return!t.includes(e)})}},{key:"_addAriaAndCollapsedClass",value:function(e,t){if(e.length){var n,r=_createForOfIteratorHelper(e);try{for(r.s();!(n=r.n()).done;){var o=n.value;o.classList.toggle("collapsed",!t),o.setAttribute("aria-expanded",t)}}catch(e){r.e(e)}finally{r.f()}}}}],[{key:"Default",get:function(){return it}},{key:"DefaultType",get:function(){return at}},{key:"NAME",get:function(){return"collapse"}},{key:"jQueryInterface",value:function(t){var n={};return"string"==typeof t&&/show|hide/.test(t)&&(n.toggle=!1),this.each(function(){var e=l.getOrCreateInstance(this,n);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),l}(),E=(m.on(document,n,ot,function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();var t,e=M(this),n=_createForOfIteratorHelper(f.find(e));try{for(n.s();!(t=n.n()).done;){var r=t.value;st.getOrCreateInstance(r,{toggle:!1}).toggle()}}catch(e){n.e(e)}finally{n.f()}}),e(st),"top"),T="bottom",S="right",L="left",ct="auto",lt=[E,T,S,L],j="start",ut="end",ft="clippingParents",dt="viewport",pt="popper",ht="reference",mt=lt.reduce(function(e,t){return e.concat([t+"-"+j,t+"-"+ut])},[]),gt=[].concat(lt,[ct]).reduce(function(e,t){return e.concat([t,t+"-"+j,t+"-"+ut])},[]),g="beforeRead",p="afterRead",n="beforeMain",vt="afterMain",yt="beforeWrite",_t="afterWrite",bt=[g,"read",p,n,"main",vt,yt,"write",_t];function v(e){return e?(e.nodeName||"").toLowerCase():null}function _(e){var t;return null==e?window:"[object Window]"!==e.toString()?(t=e.ownerDocument)&&t.defaultView||window:e}function y(e){return e instanceof _(e).Element||e instanceof Element}function b(e){return e instanceof _(e).HTMLElement||e instanceof HTMLElement}function wt(e){return"undefined"!=typeof ShadowRoot&&(e instanceof _(e).ShadowRoot||e instanceof ShadowRoot)}var w={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},r=o.elements[e];b(r)&&v(r)&&(Object.assign(r.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var r=e.state,o={popper:{position:r.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(r.elements.popper.style,o.popper),r.styles=o,r.elements.arrow&&Object.assign(r.elements.arrow.style,o.arrow),function(){Object.keys(r.elements).forEach(function(e){var t=r.elements[e],n=r.attributes[e]||{},e=Object.keys((r.styles.hasOwnProperty(e)?r.styles:o)[e]).reduce(function(e,t){return e[t]="",e},{});b(t)&&v(t)&&(Object.assign(t.style,e),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]};function P(e){return e.split("-")[0]}var C=Math.max,kt=Math.min,Ot=Math.round;function xt(){var e=navigator.userAgentData;return null!=e&&e.brands?e.brands.map(function(e){return e.brand+"/"+e.version}).join(" "):navigator.userAgent}function At(){return!/^((?!chrome|android).)*safari/i.test(xt())}function Ct(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var r=e.getBoundingClientRect(),o=1,i=1;t&&b(e)&&(o=0<e.offsetWidth&&Ot(r.width)/e.offsetWidth||1,i=0<e.offsetHeight&&Ot(r.height)/e.offsetHeight||1);t=(y(e)?_(e):window).visualViewport,e=!At()&&n,n=(r.left+(e&&t?t.offsetLeft:0))/o,e=(r.top+(e&&t?t.offsetTop:0))/i,t=r.width/o,o=r.height/i;return{width:t,height:o,top:e,right:n+t,bottom:e+o,left:n,x:n,y:e}}function Et(e){var t=Ct(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function Tt(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&wt(n)){var r=t;do{if(r&&e.isSameNode(r))return!0}while(r=r.parentNode||r.host)}return!1}function k(e){return _(e).getComputedStyle(e)}function O(e){return((y(e)?e.ownerDocument:e.document)||window.document).documentElement}function St(e){return"html"===v(e)?e:e.assignedSlot||e.parentNode||(wt(e)?e.host:null)||O(e)}function Lt(e){return b(e)&&"fixed"!==k(e).position?e.offsetParent:null}function jt(e){for(var t,n=_(e),r=Lt(e);r&&(t=r,0<=["table","td","th"].indexOf(v(t)))&&"static"===k(r).position;)r=Lt(r);return(!r||"html"!==v(r)&&("body"!==v(r)||"static"!==k(r).position))&&(r||function(e){var t=/firefox/i.test(xt()),n=/Trident/i.test(xt());if(!n||!b(e)||"fixed"!==k(e).position){var r=St(e);for(wt(r)&&(r=r.host);b(r)&&["html","body"].indexOf(v(r))<0;){var o=k(r);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return r;r=r.parentNode}}return null}(e))||n}function Pt(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function It(e,t,n){return C(e,kt(t,n))}function Dt(){return{top:0,right:0,bottom:0,left:0}}function Nt(e){return Object.assign({},Dt(),e)}function Mt(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}var Ht={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i=e.state,a=e.name,e=e.options,s=i.elements.arrow,c=i.modifiersData.popperOffsets,l=Pt(u=P(i.placement)),u=0<=[L,S].indexOf(u)?"height":"width";s&&c&&(e=e.padding,n=i,n=Nt("number"!=typeof(e="function"==typeof e?e(Object.assign({},n.rects,{placement:n.placement})):e)?e:Mt(e,lt)),e=Et(s),o="y"===l?E:L,r="y"===l?T:S,t=i.rects.reference[u]+i.rects.reference[l]-c[l]-i.rects.popper[u],c=c[l]-i.rects.reference[l],s=(s=jt(s))?"y"===l?s.clientHeight||0:s.clientWidth||0:0,o=n[o],n=s-e[u]-n[r],o=It(o,r=s/2-e[u]/2+(t/2-c/2),n),i.modifiersData[a]=((s={})[l]=o,s.centerOffset=o-r,s))},effect:function(e){var t=e.state;null!=(e=void 0===(e=e.options.element)?"[data-popper-arrow]":e)&&("string"!=typeof e||(e=t.elements.popper.querySelector(e)))&&Tt(t.elements.popper,e)&&(t.elements.arrow=e)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Ft(e){return e.split("-")[1]}var Bt={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Rt(e){var t,n,r,o=e.popper,i=e.popperRect,a=e.placement,s=e.variation,c=e.offsets,l=e.position,u=e.gpuAcceleration,f=e.adaptive,d=e.roundOffsets,e=e.isFixed,p=c.x,p=void 0===p?0:p,h=c.y,h=void 0===h?0:h,m="function"==typeof d?d({x:p,y:h}):{x:p,y:h},m=(p=m.x,h=m.y,c.hasOwnProperty("x")),c=c.hasOwnProperty("y"),g=L,v=E,y=window,o=(f&&(n="clientHeight",t="clientWidth",(r=jt(o))===_(o)&&"static"!==k(r=O(o)).position&&"absolute"===l&&(n="scrollHeight",t="scrollWidth"),a!==E&&(a!==L&&a!==S||s!==ut)||(v=T,h=(h-((e&&r===y&&y.visualViewport?y.visualViewport.height:r[n])-i.height))*(u?1:-1)),a!==L&&(a!==E&&a!==T||s!==ut)||(g=S,p=(p-((e&&r===y&&y.visualViewport?y.visualViewport.width:r[t])-i.width))*(u?1:-1))),Object.assign({position:l},f&&Bt)),e=!0===d?(a=(n={x:p,y:h}).x,n=n.y,s=window.devicePixelRatio||1,{x:Ot(a*s)/s||0,y:Ot(n*s)/s||0}):{x:p,y:h};return p=e.x,h=e.y,u?Object.assign({},o,((r={})[v]=c?"0":"",r[g]=m?"0":"",r.transform=(y.devicePixelRatio||1)<=1?"translate("+p+"px, "+h+"px)":"translate3d("+p+"px, "+h+"px, 0)",r)):Object.assign({},o,((t={})[v]=c?h+"px":"",t[g]=m?p+"px":"",t.transform="",t))}var qt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,e=e.options,n=void 0===(n=e.gpuAcceleration)||n,r=void 0===(r=e.adaptive)||r,e=void 0===(e=e.roundOffsets)||e,n={placement:P(t.placement),variation:Ft(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:n,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Rt(Object.assign({},n,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:e})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Rt(Object.assign({},n,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:e})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},Wt={passive:!0};var zt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=(e=e.options).scroll,o=void 0===r||r,i=void 0===(r=e.resize)||r,a=_(t.elements.popper),s=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&s.forEach(function(e){e.addEventListener("scroll",n.update,Wt)}),i&&a.addEventListener("resize",n.update,Wt),function(){o&&s.forEach(function(e){e.removeEventListener("scroll",n.update,Wt)}),i&&a.removeEventListener("resize",n.update,Wt)}},data:{}},Vt={left:"right",right:"left",bottom:"top",top:"bottom"};function Kt(e){return e.replace(/left|right|bottom|top/g,function(e){return Vt[e]})}var Yt={start:"end",end:"start"};function Ut(e){return e.replace(/start|end/g,function(e){return Yt[e]})}function Gt(e){e=_(e);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function Xt(e){return Ct(O(e)).left+Gt(e).scrollLeft}function Qt(e){var e=k(e),t=e.overflow,n=e.overflowX,e=e.overflowY;return/auto|scroll|overlay|hidden/.test(t+e+n)}function $t(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(v(t))?t.ownerDocument.body:b(t)&&Qt(t)?t:e(St(t))}(e),e=n===(null==(e=e.ownerDocument)?void 0:e.body),r=_(n),r=e?[r].concat(r.visualViewport||[],Qt(n)?n:[]):n,n=t.concat(r);return e?n:n.concat($t(St(r)))}function Jt(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function Zt(e,t,n){return t===dt?Jt((o=n,a=_(r=e),s=O(r),a=a.visualViewport,c=s.clientWidth,s=s.clientHeight,u=l=0,a&&(c=a.width,s=a.height,(i=At())||!i&&"fixed"===o)&&(l=a.offsetLeft,u=a.offsetTop),{width:c,height:s,x:l+Xt(r),y:u})):y(t)?((o=Ct(i=t,!1,"fixed"===(o=n))).top=o.top+i.clientTop,o.left=o.left+i.clientLeft,o.bottom=o.top+i.clientHeight,o.right=o.left+i.clientWidth,o.width=i.clientWidth,o.height=i.clientHeight,o.x=o.left,o.y=o.top,o):Jt((a=O(e),c=O(a),s=Gt(a),l=null==(l=a.ownerDocument)?void 0:l.body,r=C(c.scrollWidth,c.clientWidth,l?l.scrollWidth:0,l?l.clientWidth:0),u=C(c.scrollHeight,c.clientHeight,l?l.scrollHeight:0,l?l.clientHeight:0),a=-s.scrollLeft+Xt(a),s=-s.scrollTop,"rtl"===k(l||c).direction&&(a+=C(c.clientWidth,l?l.clientWidth:0)-r),{width:r,height:u,x:a,y:s}));var r,o,i,a,s,c,l,u}function en(n,e,t,r){var o,i="clippingParents"===e?(a=$t(St(i=n)),y(o=0<=["absolute","fixed"].indexOf(k(i).position)&&b(i)?jt(i):i)?a.filter(function(e){return y(e)&&Tt(e,o)&&"body"!==v(e)}):[]):[].concat(e),a=[].concat(i,[t]),e=a[0],t=a.reduce(function(e,t){t=Zt(n,t,r);return e.top=C(t.top,e.top),e.right=kt(t.right,e.right),e.bottom=kt(t.bottom,e.bottom),e.left=C(t.left,e.left),e},Zt(n,e,r));return t.width=t.right-t.left,t.height=t.bottom-t.top,t.x=t.left,t.y=t.top,t}function tn(e){var t,n=e.reference,r=e.element,e=e.placement,o=e?P(e):null,e=e?Ft(e):null,i=n.x+n.width/2-r.width/2,a=n.y+n.height/2-r.height/2;switch(o){case E:t={x:i,y:n.y-r.height};break;case T:t={x:i,y:n.y+n.height};break;case S:t={x:n.x+n.width,y:a};break;case L:t={x:n.x-r.width,y:a};break;default:t={x:n.x,y:n.y}}var s=o?Pt(o):null;if(null!=s){var c="y"===s?"height":"width";switch(e){case j:t[s]=t[s]-(n[c]/2-r[c]/2);break;case ut:t[s]=t[s]+(n[c]/2-r[c]/2)}}return t}function nn(e,t){var r,t=t=void 0===t?{}:t,n=t.placement,n=void 0===n?e.placement:n,o=t.strategy,o=void 0===o?e.strategy:o,i=t.boundary,i=void 0===i?ft:i,a=t.rootBoundary,a=void 0===a?dt:a,s=t.elementContext,s=void 0===s?pt:s,c=t.altBoundary,c=void 0!==c&&c,t=t.padding,t=void 0===t?0:t,t=Nt("number"!=typeof t?t:Mt(t,lt)),l=e.rects.popper,c=e.elements[c?s===pt?ht:pt:s],c=en(y(c)?c:c.contextElement||O(e.elements.popper),i,a,o),i=Ct(e.elements.reference),a=tn({reference:i,element:l,strategy:"absolute",placement:n}),o=Jt(Object.assign({},l,a)),l=s===pt?o:i,u={top:c.top-l.top+t.top,bottom:l.bottom-c.bottom+t.bottom,left:c.left-l.left+t.left,right:l.right-c.right+t.right},a=e.modifiersData.offset;return s===pt&&a&&(r=a[n],Object.keys(u).forEach(function(e){var t=0<=[S,T].indexOf(e)?1:-1,n=0<=[E,T].indexOf(e)?"y":"x";u[e]+=r[n]*t})),u}var rn={name:"flip",enabled:!0,phase:"main",fn:function(e){var f=e.state,t=e.options,e=e.name;if(!f.modifiersData[e]._skip){for(var n=t.mainAxis,r=void 0===n||n,n=t.altAxis,o=void 0===n||n,n=t.fallbackPlacements,d=t.padding,p=t.boundary,h=t.rootBoundary,i=t.altBoundary,a=t.flipVariations,m=void 0===a||a,g=t.allowedAutoPlacements,a=f.options.placement,t=P(a),n=n||(t===a||!m?[Kt(a)]:P(n=a)===ct?[]:(t=Kt(n),[Ut(n),t,Ut(t)])),s=[a].concat(n).reduce(function(e,t){return e.concat(P(t)===ct?(n=f,r=(e=e=void 0===(e={placement:t,boundary:p,rootBoundary:h,padding:d,flipVariations:m,allowedAutoPlacements:g})?{}:e).placement,o=e.boundary,i=e.rootBoundary,a=e.padding,s=e.flipVariations,c=void 0===(e=e.allowedAutoPlacements)?gt:e,l=Ft(r),e=l?s?mt:mt.filter(function(e){return Ft(e)===l}):lt,u=(r=0===(r=e.filter(function(e){return 0<=c.indexOf(e)})).length?e:r).reduce(function(e,t){return e[t]=nn(n,{placement:t,boundary:o,rootBoundary:i,padding:a})[P(t)],e},{}),Object.keys(u).sort(function(e,t){return u[e]-u[t]})):t);var n,r,o,i,a,s,c,l,u},[]),c=f.rects.reference,l=f.rects.popper,u=new Map,v=!0,y=s[0],_=0;_<s.length;_++){var b=s[_],w=P(b),k=Ft(b)===j,O=0<=[E,T].indexOf(w),x=O?"width":"height",A=nn(f,{placement:b,boundary:p,rootBoundary:h,altBoundary:i,padding:d}),O=O?k?S:L:k?T:E,k=(c[x]>l[x]&&(O=Kt(O)),Kt(O)),x=[];if(r&&x.push(A[w]<=0),o&&x.push(A[O]<=0,A[k]<=0),x.every(function(e){return e})){y=b,v=!1;break}u.set(b,x)}if(v)for(var C=m?3:1;0<C;C--)if("break"===function(t){var e=s.find(function(e){e=u.get(e);if(e)return e.slice(0,t).every(function(e){return e})});if(e)return y=e,"break"}(C))break;f.placement!==y&&(f.modifiersData[e]._skip=!0,f.placement=y,f.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function on(e,t,n){return{top:e.top-t.height-(n=void 0===n?{x:0,y:0}:n).y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function an(t){return[E,S,T,L].some(function(e){return 0<=t[e]})}var sn={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,e=e.name,n=t.rects.reference,r=t.rects.popper,o=t.modifiersData.preventOverflow,i=nn(t,{elementContext:"reference"}),a=nn(t,{altBoundary:!0}),i=on(i,n),n=on(a,r,o),a=an(i),r=an(n);t.modifiersData[e]={referenceClippingOffsets:i,popperEscapeOffsets:n,isReferenceHidden:a,hasPopperEscaped:r},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":a,"data-popper-escaped":r})}};var cn={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var a=e.state,t=e.options,e=e.name,s=void 0===(t=t.offset)?[0,0]:t,t=gt.reduce(function(e,t){var n,r,o,i;return e[t]=(t=t,n=a.rects,r=s,o=P(t),i=0<=[L,E].indexOf(o)?-1:1,t=(n="function"==typeof r?r(Object.assign({},n,{placement:t})):r)[0]||0,r=(n[1]||0)*i,0<=[L,S].indexOf(o)?{x:r,y:t}:{x:t,y:r}),e},{}),n=(r=t[a.placement]).x,r=r.y;null!=a.modifiersData.popperOffsets&&(a.modifiersData.popperOffsets.x+=n,a.modifiersData.popperOffsets.y+=r),a.modifiersData[e]=t}};var ln={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,e=e.name;t.modifiersData[e]=tn({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}};var un={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,a,s,c,l,u=e.state,f=e.options,e=e.name,d=void 0===(d=f.mainAxis)||d,p=void 0!==(p=f.altAxis)&&p,h=f.boundary,m=f.rootBoundary,g=f.altBoundary,v=f.padding,y=void 0===(y=f.tether)||y,f=void 0===(f=f.tetherOffset)?0:f,h=nn(u,{boundary:h,rootBoundary:m,padding:v,altBoundary:g}),m=P(u.placement),g=!(v=Ft(u.placement)),_=Pt(m),b="x"===_?"y":"x",w=u.modifiersData.popperOffsets,k=u.rects.reference,O=u.rects.popper,f="number"==typeof(f="function"==typeof f?f(Object.assign({},u.rects,{placement:u.placement})):f)?{mainAxis:f,altAxis:f}:Object.assign({mainAxis:0,altAxis:0},f),x=u.modifiersData.offset?u.modifiersData.offset[u.placement]:null,A={x:0,y:0};w&&(d&&(d="y"===_?"height":"width",a=(s=w[_])+h[n="y"===_?E:L],c=s-h[l="y"===_?T:S],t=y?-O[d]/2:0,o=(v===j?k:O)[d],v=v===j?-O[d]:-k[d],i=u.elements.arrow,i=y&&i?Et(i):{width:0,height:0},n=(r=u.modifiersData["arrow#persistent"]?u.modifiersData["arrow#persistent"].padding:Dt())[n],r=r[l],l=It(0,k[d],i[d]),i=g?k[d]/2-t-l-n-f.mainAxis:o-l-n-f.mainAxis,o=g?-k[d]/2+t+l+r+f.mainAxis:v+l+r+f.mainAxis,g=(n=u.elements.arrow&&jt(u.elements.arrow))?"y"===_?n.clientTop||0:n.clientLeft||0:0,v=s+o-(t=null!=(d=null==x?void 0:x[_])?d:0),l=It(y?kt(a,s+i-t-g):a,s,y?C(c,v):c),w[_]=l,A[_]=l-s),p&&(r="y"==b?"height":"width",o=(n=w[b])+h["x"===_?E:L],d=n-h["x"===_?T:S],i=-1!==[E,L].indexOf(m),g=null!=(t=null==x?void 0:x[b])?t:0,a=i?o:n-k[r]-O[r]-g+f.altAxis,v=i?n+k[r]+O[r]-g-f.altAxis:d,s=y&&i?(c=It(c=a,n,l=v),l<c?l:c):It(y?a:o,n,y?v:d),w[b]=s,A[b]=s-n),u.modifiersData[e]=A)},requiresIfExists:["offset"]};function fn(e,t,n){void 0===n&&(n=!1);var r=b(t),o=b(t)&&(a=(o=t).getBoundingClientRect(),i=Ot(a.width)/o.offsetWidth||1,a=Ot(a.height)/o.offsetHeight||1,1!==i||1!==a),i=O(t),a=Ct(e,o,n),e={scrollLeft:0,scrollTop:0},s={x:0,y:0};return!r&&n||("body"===v(t)&&!Qt(i)||(e=(r=t)!==_(r)&&b(r)?{scrollLeft:r.scrollLeft,scrollTop:r.scrollTop}:Gt(r)),b(t)?((s=Ct(t,!0)).x+=t.clientLeft,s.y+=t.clientTop):i&&(s.x=Xt(i))),{x:a.left+e.scrollLeft-s.x,y:a.top+e.scrollTop-s.y,width:a.width,height:a.height}}function dn(e){var n=new Map,r=new Set,o=[];return e.forEach(function(e){n.set(e.name,e)}),e.forEach(function(e){r.has(e.name)||!function t(e){r.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){r.has(e)||(e=n.get(e))&&t(e)}),o.push(e)}(e)}),o}var pn={placement:"bottom",modifiers:[],strategy:"absolute"};function hn(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function mn(e){var e=e=void 0===e?{}:e,t=e.defaultModifiers,f=void 0===t?[]:t,t=e.defaultOptions,d=void 0===t?pn:t;return function(r,o,t){void 0===t&&(t=d);var n,i,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},pn,d),modifiersData:{},elements:{reference:r,popper:o},attributes:{},styles:{}},s=[],c=!1,l={state:a,setOptions:function(e){var n,t,e="function"==typeof e?e(a.options):e,e=(u(),a.options=Object.assign({},d,a.options,e),a.scrollParents={reference:y(r)?$t(r):r.contextElement?$t(r.contextElement):[],popper:$t(o)},e=[].concat(f,a.options.modifiers),t=e.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e},{}),e=Object.keys(t).map(function(e){return t[e]}),n=dn(e),bt.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[]));return a.orderedModifiers=e.filter(function(e){return e.enabled}),a.orderedModifiers.forEach(function(e){var t=e.name,n=e.options,e=e.effect;"function"==typeof e&&(e=e({state:a,name:t,instance:l,options:void 0===n?{}:n}),s.push(e||function(){}))}),l.update()},forceUpdate:function(){if(!c){var e=a.elements,t=e.reference,e=e.popper;if(hn(t,e)){a.rects={reference:fn(t,jt(e),"fixed"===a.options.strategy),popper:Et(e)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach(function(e){return a.modifiersData[e.name]=Object.assign({},e.data)});for(var n,r,o,i=0;i<a.orderedModifiers.length;i++)!0===a.reset?(a.reset=!1,i=-1):(n=(o=a.orderedModifiers[i]).fn,r=o.options,o=o.name,"function"==typeof n&&(a=n({state:a,options:void 0===r?{}:r,name:o,instance:l})||a))}}},update:(n=function(){return new Promise(function(e){l.forceUpdate(),e(a)})},function(){return i=i||new Promise(function(e){Promise.resolve().then(function(){i=void 0,e(n())})})}),destroy:function(){u(),c=!0}};return hn(r,o)&&l.setOptions(t).then(function(e){!c&&t.onFirstUpdate&&t.onFirstUpdate(e)}),l;function u(){s.forEach(function(e){return e()}),s=[]}}}var gn=mn({defaultModifiers:[zt,ln,qt,w,cn,rn,un,Ht,sn]}),vn=Object.freeze(Object.defineProperty({__proto__:null,popperGenerator:mn,detectOverflow:nn,createPopperBase:mn(),createPopper:gn,createPopperLite:mn({defaultModifiers:[zt,ln,qt,w]}),top:E,bottom:T,right:S,left:L,auto:ct,basePlacements:lt,start:j,end:ut,clippingParents:ft,viewport:dt,popper:pt,reference:ht,variationPlacements:mt,placements:gt,beforeRead:g,read:"read",afterRead:p,beforeMain:n,main:"main",afterMain:vt,beforeWrite:yt,write:"write",afterWrite:_t,modifierPhases:bt,applyStyles:w,arrow:Ht,computeStyles:qt,eventListeners:zt,flip:rn,hide:sn,offset:cn,popperOffsets:ln,preventOverflow:un},Symbol.toStringTag,{value:"Module"})),yn="dropdown",g=".".concat("bs.dropdown"),p=".data-api",_n="ArrowDown",bn="hide".concat(g),wn="hidden".concat(g),kn="show".concat(g),On="shown".concat(g),n="click".concat(g).concat(p),vt="keydown".concat(g).concat(p),yt="keyup".concat(g).concat(p),xn="show",x='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',An="".concat(x,".").concat(xn),Cn=".dropdown-menu",En=c()?"top-end":"top-start",Tn=c()?"top-start":"top-end",Sn=c()?"bottom-end":"bottom-start",Ln=c()?"bottom-start":"bottom-end",jn=c()?"left-start":"right-start",Pn=c()?"right-start":"left-start",In={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},Dn={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"},A=function(){_inherits(c,t);var n=_createSuper(c);function c(e,t){return _classCallCheck(this,c),(e=n.call(this,e,t))._popper=null,e._parent=e._element.parentNode,e._menu=f.next(e._element,Cn)[0]||f.prev(e._element,Cn)[0]||f.findOne(Cn,e._parent),e._inNavbar=e._detectNavbar(),e}return _createClass(c,[{key:"toggle",value:function(){return this._isShown()?this.hide():this.show()}},{key:"show",value:function(){if(!i(this._element)&&!this._isShown()){var e={relatedTarget:this._element},t=m.trigger(this._element,kn,e);if(!t.defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav")){var n,r=_createForOfIteratorHelper((t=[]).concat.apply(t,_toConsumableArray(document.body.children)));try{for(r.s();!(n=r.n()).done;){var o=n.value;m.on(o,"mouseover",B)}}catch(e){r.e(e)}finally{r.f()}}this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(xn),this._element.classList.add(xn),m.trigger(this._element,On,e)}}}},{key:"hide",value:function(){var e;!i(this._element)&&this._isShown()&&(e={relatedTarget:this._element},this._completeHide(e))}},{key:"dispose",value:function(){this._popper&&this._popper.destroy(),_get(_getPrototypeOf(c.prototype),"dispose",this).call(this)}},{key:"update",value:function(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}},{key:"_completeHide",value:function(e){var t=m.trigger(this._element,bn,e);if(!t.defaultPrevented){if("ontouchstart"in document.documentElement){var n,r=_createForOfIteratorHelper((t=[]).concat.apply(t,_toConsumableArray(document.body.children)));try{for(r.s();!(n=r.n()).done;){var o=n.value;m.off(o,"mouseover",B)}}catch(e){r.e(e)}finally{r.f()}}this._popper&&this._popper.destroy(),this._menu.classList.remove(xn),this._element.classList.remove(xn),this._element.setAttribute("aria-expanded","false"),ge(this._menu,"popper"),m.trigger(this._element,wn,e)}}},{key:"_getConfig",value:function(e){if(e=_get(_getPrototypeOf(c.prototype),"_getConfig",this).call(this,e),"object"!==_typeof(e.reference)||u(e.reference)||"function"==typeof e.reference.getBoundingClientRect)return e;throw new TypeError("".concat(yn.toUpperCase(),': Option "reference" provided type "object" without a required "getBoundingClientRect" method.'))}},{key:"_createPopper",value:function(){if(void 0===vn)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");var e=this._element,t=("parent"===this._config.reference?e=this._parent:u(this._config.reference)?e=s(this._config.reference):"object"===_typeof(this._config.reference)&&(e=this._config.reference),this._getPopperConfig());this._popper=gn(e,this._menu,t)}},{key:"_isShown",value:function(){return this._menu.classList.contains(xn)}},{key:"_getPlacement",value:function(){var e,t=this._parent;return t.classList.contains("dropend")?jn:t.classList.contains("dropstart")?Pn:t.classList.contains("dropup-center")?"top":t.classList.contains("dropdown-center")?"bottom":(e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim(),t.classList.contains("dropup")?e?Tn:En:e?Ln:Sn)}},{key:"_detectNavbar",value:function(){return null!==this._element.closest(".navbar")}},{key:"_getOffset",value:function(){var t=this,n=this._config.offset;return"string"==typeof n?n.split(",").map(function(e){return Number.parseInt(e,10)}):"function"==typeof n?function(e){return n(e,t._element)}:n}},{key:"_getPopperConfig",value:function(){var e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return!this._inNavbar&&"static"!==this._config.display||(me(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),_objectSpread(_objectSpread({},e),"function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig)}},{key:"_selectMenuItem",value:function(e){var t=e.key,e=e.target,n=f.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(o);n.length&&z(n,e,t===_n,!n.includes(e)).focus()}}],[{key:"Default",get:function(){return In}},{key:"DefaultType",get:function(){return Dn}},{key:"NAME",get:function(){return yn}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=c.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}},{key:"clearMenus",value:function(e){if(2!==e.button&&("keyup"!==e.type||"Tab"===e.key)){var t,n=_createForOfIteratorHelper(f.find(An));try{for(n.s();!(t=n.n()).done;){var r,o,i,a=t.value,s=c.getInstance(a);s&&!1!==s._config.autoClose&&(o=(r=e.composedPath()).includes(s._menu),r.includes(s._element)||"inside"===s._config.autoClose&&!o||"outside"===s._config.autoClose&&o||s._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName))||(i={relatedTarget:s._element},"click"===e.type&&(i.clickEvent=e),s._completeHide(i)))}}catch(e){n.e(e)}finally{n.f()}}}},{key:"dataApiKeydownHandler",value:function(e){var t=/input|textarea/i.test(e.target.tagName),n="Escape"===e.key,r=["ArrowUp",_n].includes(e.key);!r&&!n||t&&!n||(e.preventDefault(),t=this.matches(x)?this:f.prev(this,x)[0]||f.next(this,x)[0]||f.findOne(x,e.delegateTarget.parentNode),n=c.getOrCreateInstance(t),r?(e.stopPropagation(),n.show(),n._selectMenuItem(e)):n._isShown()&&(e.stopPropagation(),n.hide(),t.focus()))}}]),c}(),Nn=(m.on(document,vt,x,A.dataApiKeydownHandler),m.on(document,vt,Cn,A.dataApiKeydownHandler),m.on(document,n,A.clearMenus),m.on(document,yt,A.clearMenus),m.on(document,n,x,function(e){e.preventDefault(),A.getOrCreateInstance(this).toggle()}),e(A),".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"),Mn=".sticky-top",Hn="padding-right",Fn="margin-right",Bn=function(){function e(){_classCallCheck(this,e),this._element=document.body}return _createClass(e,[{key:"getWidth",value:function(){var e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}},{key:"hide",value:function(){var t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,Hn,function(e){return e+t}),this._setElementAttributes(Nn,Hn,function(e){return e+t}),this._setElementAttributes(Mn,Fn,function(e){return e-t})}},{key:"reset",value:function(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,Hn),this._resetElementAttributes(Nn,Hn),this._resetElementAttributes(Mn,Fn)}},{key:"isOverflowing",value:function(){return 0<this.getWidth()}},{key:"_disableOverFlow",value:function(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}},{key:"_setElementAttributes",value:function(e,n,r){var o=this,i=this.getWidth();this._applyManipulationCallback(e,function(e){var t;e!==o._element&&window.innerWidth>e.clientWidth+i||(o._saveInitialAttribute(e,n),t=window.getComputedStyle(e).getPropertyValue(n),e.style.setProperty(n,"".concat(r(Number.parseFloat(t)),"px")))})}},{key:"_saveInitialAttribute",value:function(e,t){var n=e.style.getPropertyValue(t);n&&me(e,t,n)}},{key:"_resetElementAttributes",value:function(e,n){this._applyManipulationCallback(e,function(e){var t=ye(e,n);null===t?e.style.removeProperty(n):(ge(e,n),e.style.setProperty(n,t))})}},{key:"_applyManipulationCallback",value:function(e,t){if(u(e))t(e);else{var n,r=_createForOfIteratorHelper(f.find(e,this._element));try{for(r.s();!(n=r.n()).done;)t(n.value)}catch(e){r.e(e)}finally{r.f()}}}}]),e}(),Rn="backdrop",qn="mousedown.bs.".concat(Rn),Wn={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},zn={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"},Vn=function(){_inherits(r,_e);var n=_createSuper(r);function r(e){var t;return _classCallCheck(this,r),(t=n.call(this))._config=t._getConfig(e),t._isAppended=!1,t._element=null,t}return _createClass(r,[{key:"show",value:function(e){var t;this._config.isVisible?(this._append(),t=this._getElement(),this._config.isAnimated&&R(t),t.classList.add("show"),this._emulateAnimation(function(){l(e)})):l(e)}},{key:"hide",value:function(e){var t=this;this._config.isVisible?(this._getElement().classList.remove("show"),this._emulateAnimation(function(){t.dispose(),l(e)})):l(e)}},{key:"dispose",value:function(){this._isAppended&&(m.off(this._element,qn),this._element.remove(),this._isAppended=!1)}},{key:"_getElement",value:function(){var e;return this._element||((e=document.createElement("div")).className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e),this._element}},{key:"_configAfterMerge",value:function(e){return e.rootElement=s(e.rootElement),e}},{key:"_append",value:function(){var e,t=this;this._isAppended||(e=this._getElement(),this._config.rootElement.append(e),m.on(e,qn,function(){l(t._config.clickCallback)}),this._isAppended=!0)}},{key:"_emulateAnimation",value:function(e){W(e,this._getElement(),this._config.isAnimated)}}],[{key:"Default",get:function(){return Wn}},{key:"DefaultType",get:function(){return zn}},{key:"NAME",get:function(){return Rn}}]),r}(),Kn=".".concat("bs.focustrap"),Yn="focusin".concat(Kn),Un="keydown.tab".concat(Kn),Gn="backward",Xn={autofocus:!0,trapElement:null},Qn={autofocus:"boolean",trapElement:"element"},$n=function(){_inherits(r,_e);var n=_createSuper(r);function r(e){var t;return _classCallCheck(this,r),(t=n.call(this))._config=t._getConfig(e),t._isActive=!1,t._lastTabNavDirection=null,t}return _createClass(r,[{key:"activate",value:function(){var t=this;this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),m.off(document,Kn),m.on(document,Yn,function(e){return t._handleFocusin(e)}),m.on(document,Un,function(e){return t._handleKeydown(e)}),this._isActive=!0)}},{key:"deactivate",value:function(){this._isActive&&(this._isActive=!1,m.off(document,Kn))}},{key:"_handleFocusin",value:function(e){var t=this._config.trapElement;e.target===document||e.target===t||t.contains(e.target)||(0===(e=f.focusableChildren(t)).length?t:this._lastTabNavDirection===Gn?e[e.length-1]:e[0]).focus()}},{key:"_handleKeydown",value:function(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Gn:"forward")}}],[{key:"Default",get:function(){return Xn}},{key:"DefaultType",get:function(){return Qn}},{key:"NAME",get:function(){return"focustrap"}}]),r}(),I=".".concat("bs.modal"),Jn="hide".concat(I),Zn="hidePrevented".concat(I),er="hidden".concat(I),tr="show".concat(I),nr="shown".concat(I),rr="resize".concat(I),or="click.dismiss".concat(I),ir="mousedown.dismiss".concat(I),ar="keydown.dismiss".concat(I),_t="click".concat(I).concat(".data-api"),sr="modal-open",cr="modal-static",lr={backdrop:!0,focus:!0,keyboard:!0},ur={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"},fr=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){return _classCallCheck(this,r),(e=n.call(this,e,t))._dialog=f.findOne(".modal-dialog",e._element),e._backdrop=e._initializeBackDrop(),e._focustrap=e._initializeFocusTrap(),e._isShown=!1,e._isTransitioning=!1,e._scrollBar=new Bn,e._addEventListeners(),e}return _createClass(r,[{key:"toggle",value:function(e){return this._isShown?this.hide():this.show(e)}},{key:"show",value:function(e){var t=this;this._isShown||this._isTransitioning||m.trigger(this._element,tr,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(sr),this._adjustDialog(),this._backdrop.show(function(){return t._showElement(e)}))}},{key:"hide",value:function(){var e=this;!this._isShown||this._isTransitioning||m.trigger(this._element,Jn).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove("show"),this._queueCallback(function(){return e._hideModal()},this._element,this._isAnimated()))}},{key:"dispose",value:function(){for(var e=0,t=[window,this._dialog];e<t.length;e++)m.off(t[e],I);this._backdrop.dispose(),this._focustrap.deactivate(),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"handleUpdate",value:function(){this._adjustDialog()}},{key:"_initializeBackDrop",value:function(){return new Vn({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}},{key:"_initializeFocusTrap",value:function(){return new $n({trapElement:this._element})}},{key:"_showElement",value:function(e){var t=this,n=(document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,f.findOne(".modal-body",this._dialog));n&&(n.scrollTop=0),R(this._element),this._element.classList.add("show");this._queueCallback(function(){t._config.focus&&t._focustrap.activate(),t._isTransitioning=!1,m.trigger(t._element,nr,{relatedTarget:e})},this._dialog,this._isAnimated())}},{key:"_addEventListeners",value:function(){var n=this;m.on(this._element,ar,function(e){"Escape"===e.key&&(n._config.keyboard?(e.preventDefault(),n.hide()):n._triggerBackdropTransition())}),m.on(window,rr,function(){n._isShown&&!n._isTransitioning&&n._adjustDialog()}),m.on(this._element,ir,function(t){m.one(n._element,or,function(e){n._element===t.target&&n._element===e.target&&("static"===n._config.backdrop?n._triggerBackdropTransition():n._config.backdrop&&n.hide())})})}},{key:"_hideModal",value:function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(function(){document.body.classList.remove(sr),e._resetAdjustments(),e._scrollBar.reset(),m.trigger(e._element,er)})}},{key:"_isAnimated",value:function(){return this._element.classList.contains("fade")}},{key:"_triggerBackdropTransition",value:function(){var e,t,n=this;m.trigger(this._element,Zn).defaultPrevented||(e=this._element.scrollHeight>document.documentElement.clientHeight,"hidden"===(t=this._element.style.overflowY))||this._element.classList.contains(cr)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(cr),this._queueCallback(function(){n._element.classList.remove(cr),n._queueCallback(function(){n._element.style.overflowY=t},n._dialog)},this._dialog),this._element.focus())}},{key:"_adjustDialog",value:function(){var e,t=this._element.scrollHeight>document.documentElement.clientHeight,n=this._scrollBar.getWidth(),r=0<n;r&&!t&&(e=c()?"paddingLeft":"paddingRight",this._element.style[e]="".concat(n,"px")),!r&&t&&(e=c()?"paddingRight":"paddingLeft",this._element.style[e]="".concat(n,"px"))}},{key:"_resetAdjustments",value:function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}}],[{key:"Default",get:function(){return lr}},{key:"DefaultType",get:function(){return ur}},{key:"NAME",get:function(){return"modal"}},{key:"jQueryInterface",value:function(t,n){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t](n)}})}}]),r}(),w=(m.on(document,_t,'[data-bs-toggle="modal"]',function(e){var t=this,n=a(this),e=(["A","AREA"].includes(this.tagName)&&e.preventDefault(),m.one(n,tr,function(e){e.defaultPrevented||m.one(n,er,function(){o(t)&&t.focus()})}),f.findOne(".modal.show"));e&&fr.getInstance(e).hide(),fr.getOrCreateInstance(n).toggle(this)}),he(fr),e(fr),".".concat("bs.offcanvas")),Ht=".data-api",qt="load".concat(w).concat(Ht),dr="showing",pr=".offcanvas.show",hr="show".concat(w),mr="shown".concat(w),gr="hide".concat(w),vr="hidePrevented".concat(w),yr="hidden".concat(w),zt="resize".concat(w),rn="click".concat(w).concat(Ht),_r="keydown.dismiss".concat(w),br={backdrop:!0,keyboard:!0,scroll:!1},wr={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"},D=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){return _classCallCheck(this,r),(e=n.call(this,e,t))._isShown=!1,e._backdrop=e._initializeBackDrop(),e._focustrap=e._initializeFocusTrap(),e._addEventListeners(),e}return _createClass(r,[{key:"toggle",value:function(e){return this._isShown?this.hide():this.show(e)}},{key:"show",value:function(e){var t=this;this._isShown||m.trigger(this._element,hr,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Bn).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(dr),this._queueCallback(function(){t._config.scroll&&!t._config.backdrop||t._focustrap.activate(),t._element.classList.add("show"),t._element.classList.remove(dr),m.trigger(t._element,mr,{relatedTarget:e})},this._element,!0))}},{key:"hide",value:function(){var e=this;this._isShown&&!m.trigger(this._element,gr).defaultPrevented&&(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add("hiding"),this._backdrop.hide(),this._queueCallback(function(){e._element.classList.remove("show","hiding"),e._element.removeAttribute("aria-modal"),e._element.removeAttribute("role"),e._config.scroll||(new Bn).reset(),m.trigger(e._element,yr)},this._element,!0))}},{key:"dispose",value:function(){this._backdrop.dispose(),this._focustrap.deactivate(),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"_initializeBackDrop",value:function(){var e=this,t=Boolean(this._config.backdrop);return new Vn({className:"offcanvas-backdrop",isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?function(){"static"===e._config.backdrop?m.trigger(e._element,vr):e.hide()}:null})}},{key:"_initializeFocusTrap",value:function(){return new $n({trapElement:this._element})}},{key:"_addEventListeners",value:function(){var t=this;m.on(this._element,_r,function(e){"Escape"===e.key&&(t._config.keyboard?t.hide():m.trigger(t._element,vr))})}}],[{key:"Default",get:function(){return br}},{key:"DefaultType",get:function(){return wr}},{key:"NAME",get:function(){return"offcanvas"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError('No method named "'.concat(t,'"'));e[t](this)}})}}]),r}(),kr=(m.on(document,rn,'[data-bs-toggle="offcanvas"]',function(e){var t=this,n=a(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),i(this)||(m.one(n,yr,function(){o(t)&&t.focus()}),(e=f.findOne(pr))&&e!==n&&D.getInstance(e).hide(),D.getOrCreateInstance(n).toggle(this))}),m.on(window,qt,function(){var e,t=_createForOfIteratorHelper(f.find(pr));try{for(t.s();!(e=t.n()).done;){var n=e.value;D.getOrCreateInstance(n).show()}}catch(e){t.e(e)}finally{t.f()}}),m.on(window,zt,function(){var e,t=_createForOfIteratorHelper(f.find("[aria-modal][class*=show][class*=offcanvas-]"));try{for(t.s();!(e=t.n()).done;){var n=e.value;"fixed"!==getComputedStyle(n).position&&D.getOrCreateInstance(n).hide()}}catch(e){t.e(e)}finally{t.f()}}),he(D),e(D),new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"])),Or=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,xr=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,sn={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};function Ar(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);var r,n=(new window.DOMParser).parseFromString(e,"text/html"),o=_createForOfIteratorHelper((e=[]).concat.apply(e,_toConsumableArray(n.body.querySelectorAll("*"))));try{for(o.s();!(r=o.n()).done;){var i,a=r.value,s=a.nodeName.toLowerCase();if(Object.keys(t).includes(s)){var c,l=(i=[]).concat.apply(i,_toConsumableArray(a.attributes)),u=[].concat(t["*"]||[],t[s]||[]),f=_createForOfIteratorHelper(l);try{for(f.s();!(c=f.n()).done;){var d=c.value;!function(e,t){var n=e.nodeName.toLowerCase();return t.includes(n)?!kr.has(n)||Boolean(Or.test(e.nodeValue)||xr.test(e.nodeValue)):t.filter(function(e){return e instanceof RegExp}).some(function(e){return e.test(n)})}(d,u)&&a.removeAttribute(d.nodeName)}}catch(e){f.e(e)}finally{f.f()}}else a.remove()}}catch(e){o.e(e)}finally{o.f()}return n.body.innerHTML}var Cr={allowList:sn,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Er={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Tr={entry:"(string|element|function|null)",selector:"(string|element)"},Sr=function(){_inherits(i,_e);var n=_createSuper(i);function i(e){var t;return _classCallCheck(this,i),(t=n.call(this))._config=t._getConfig(e),t}return _createClass(i,[{key:"getContent",value:function(){var t=this;return Object.values(this._config.content).map(function(e){return t._resolvePossibleFunction(e)}).filter(Boolean)}},{key:"hasContent",value:function(){return 0<this.getContent().length}},{key:"changeContent",value:function(e){return this._checkContent(e),this._config.content=_objectSpread(_objectSpread({},this._config.content),e),this}},{key:"toHtml",value:function(){var e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(var t=0,n=Object.entries(this._config.content);t<n.length;t++){var r=_slicedToArray(n[t],2),o=r[0],r=r[1];this._setContent(e,r,o)}var i,a=e.children[0],s=this._resolvePossibleFunction(this._config.extraClass);return s&&(i=a.classList).add.apply(i,_toConsumableArray(s.split(" "))),a}},{key:"_typeCheckConfig",value:function(e){_get(_getPrototypeOf(i.prototype),"_typeCheckConfig",this).call(this,e),this._checkContent(e.content)}},{key:"_checkContent",value:function(e){for(var t=0,n=Object.entries(e);t<n.length;t++){var r=_slicedToArray(n[t],2),o=r[0],r=r[1];_get(_getPrototypeOf(i.prototype),"_typeCheckConfig",this).call(this,{selector:o,entry:r},Tr)}}},{key:"_setContent",value:function(e,t,n){n=f.findOne(n,e);n&&((t=this._resolvePossibleFunction(t))?u(t)?this._putElementInTemplate(s(t),n):this._config.html?n.innerHTML=this._maybeSanitize(t):n.textContent=t:n.remove())}},{key:"_maybeSanitize",value:function(e){return this._config.sanitize?Ar(e,this._config.allowList,this._config.sanitizeFn):e}},{key:"_resolvePossibleFunction",value:function(e){return"function"==typeof e?e(this):e}},{key:"_putElementInTemplate",value:function(e,t){this._config.html?(t.innerHTML="",t.append(e)):t.textContent=e.textContent}}],[{key:"Default",get:function(){return Cr}},{key:"DefaultType",get:function(){return Er}},{key:"NAME",get:function(){return"TemplateFactory"}}]),i}(),Lr=new Set(["sanitize","allowList","sanitizeFn"]),jr="fade",Pr="show",Ir=".".concat("modal"),Dr="hide.bs.modal",Nr="hover",Mr="focus",Hr={AUTO:"auto",TOP:"top",RIGHT:c()?"left":"right",BOTTOM:"bottom",LEFT:c()?"right":"left"},Fr={allowList:sn,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,0],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},Br={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"},Rr=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){if(_classCallCheck(this,r),void 0===vn)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");return(e=n.call(this,e,t))._isEnabled=!0,e._timeout=0,e._isHovered=null,e._activeTrigger={},e._popper=null,e._templateFactory=null,e._newContent=null,e.tip=null,e._setListeners(),e._config.selector||e._fixTitle(),e}return _createClass(r,[{key:"enable",value:function(){this._isEnabled=!0}},{key:"disable",value:function(){this._isEnabled=!1}},{key:"toggleEnabled",value:function(){this._isEnabled=!this._isEnabled}},{key:"toggle",value:function(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}},{key:"dispose",value:function(){clearTimeout(this._timeout),m.off(this._element.closest(Ir),Dr,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"show",value:function(){var e=this;if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(this._isWithContent()&&this._isEnabled){var t=m.trigger(this._element,this.constructor.eventName("show")),n=(F(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(!t.defaultPrevented&&n){this._disposePopper();t=this._getTipElement(),n=(this._element.setAttribute("aria-describedby",t.getAttribute("id")),this._config.container);if(this._element.ownerDocument.documentElement.contains(this.tip)||(n.append(t),m.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(t),t.classList.add(Pr),"ontouchstart"in document.documentElement){var r,o=_createForOfIteratorHelper((n=[]).concat.apply(n,_toConsumableArray(document.body.children)));try{for(o.s();!(r=o.n()).done;){var i=r.value;m.on(i,"mouseover",B)}}catch(e){o.e(e)}finally{o.f()}}this._queueCallback(function(){m.trigger(e._element,e.constructor.eventName("shown")),!1===e._isHovered&&e._leave(),e._isHovered=!1},this.tip,this._isAnimated())}}}},{key:"hide",value:function(){var e=this;if(this._isShown()){var t=m.trigger(this._element,this.constructor.eventName("hide"));if(!t.defaultPrevented){if(this._getTipElement().classList.remove(Pr),"ontouchstart"in document.documentElement){var n,r=_createForOfIteratorHelper((t=[]).concat.apply(t,_toConsumableArray(document.body.children)));try{for(r.s();!(n=r.n()).done;){var o=n.value;m.off(o,"mouseover",B)}}catch(e){r.e(e)}finally{r.f()}}this._activeTrigger.click=!1,this._activeTrigger[Mr]=!1,this._activeTrigger[Nr]=!1,this._isHovered=null;this._queueCallback(function(){e._isWithActiveTrigger()||(e._isHovered||e._disposePopper(),e._element.removeAttribute("aria-describedby"),m.trigger(e._element,e.constructor.eventName("hidden")))},this.tip,this._isAnimated())}}}},{key:"update",value:function(){this._popper&&this._popper.update()}},{key:"_isWithContent",value:function(){return Boolean(this._getTitle())}},{key:"_getTipElement",value:function(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}},{key:"_createTipElement",value:function(e){e=this._getTemplateFactory(e).toHtml();if(!e)return null;e.classList.remove(jr,Pr),e.classList.add("bs-".concat(this.constructor.NAME,"-auto"));var t=function(e){for(;e+=Math.floor(1e6*Math.random()),document.getElementById(e););return e}(this.constructor.NAME).toString();return e.setAttribute("id",t),this._isAnimated()&&e.classList.add(jr),e}},{key:"setContent",value:function(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}},{key:"_getTemplateFactory",value:function(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new Sr(_objectSpread(_objectSpread({},this._config),{},{content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)})),this._templateFactory}},{key:"_getContentForTemplate",value:function(){return _defineProperty({},".tooltip-inner",this._getTitle())}},{key:"_getTitle",value:function(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}},{key:"_initializeOnDelegatedTarget",value:function(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}},{key:"_isAnimated",value:function(){return this._config.animation||this.tip&&this.tip.classList.contains(jr)}},{key:"_isShown",value:function(){return this.tip&&this.tip.classList.contains(Pr)}},{key:"_createPopper",value:function(e){var t="function"==typeof this._config.placement?this._config.placement.call(this,e,this._element):this._config.placement,t=Hr[t.toUpperCase()];return gn(this._element,e,this._getPopperConfig(t))}},{key:"_getOffset",value:function(){var t=this,n=this._config.offset;return"string"==typeof n?n.split(",").map(function(e){return Number.parseInt(e,10)}):"function"==typeof n?function(e){return n(e,t._element)}:n}},{key:"_resolvePossibleFunction",value:function(e){return"function"==typeof e?e.call(this._element):e}},{key:"_getPopperConfig",value:function(e){var t=this,e={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:".".concat(this.constructor.NAME,"-arrow")}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:function(e){t._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return _objectSpread(_objectSpread({},e),"function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig)}},{key:"_setListeners",value:function(){var e,n=this,t=_createForOfIteratorHelper(this._config.trigger.split(" "));try{for(t.s();!(e=t.n()).done;){var r,o,i=e.value;"click"===i?m.on(this._element,this.constructor.eventName("click"),this._config.selector,function(e){n._initializeOnDelegatedTarget(e).toggle()}):"manual"!==i&&(r=i===Nr?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),o=i===Nr?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout"),m.on(this._element,r,this._config.selector,function(e){var t=n._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?Mr:Nr]=!0,t._enter()}),m.on(this._element,o,this._config.selector,function(e){var t=n._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?Mr:Nr]=t._element.contains(e.relatedTarget),t._leave()}))}}catch(e){t.e(e)}finally{t.f()}this._hideModalHandler=function(){n._element&&n.hide()},m.on(this._element.closest(Ir),Dr,this._hideModalHandler)}},{key:"_fixTitle",value:function(){var e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}},{key:"_enter",value:function(){var e=this;this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout(function(){e._isHovered&&e.show()},this._config.delay.show))}},{key:"_leave",value:function(){var e=this;this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout(function(){e._isHovered||e.hide()},this._config.delay.hide))}},{key:"_setTimeout",value:function(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}},{key:"_isWithActiveTrigger",value:function(){return Object.values(this._activeTrigger).includes(!0)}},{key:"_getConfig",value:function(e){for(var t=ve(this._element),n=0,r=Object.keys(t);n<r.length;n++){var o=r[n];Lr.has(o)&&delete t[o]}return e=_objectSpread(_objectSpread({},t),"object"===_typeof(e)&&e?e:{}),e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}},{key:"_configAfterMerge",value:function(e){return e.container=!1===e.container?document.body:s(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}},{key:"_getDelegateConfig",value:function(){var e,t={};for(e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t.selector=!1,t.trigger="manual",t}},{key:"_disposePopper",value:function(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}}],[{key:"Default",get:function(){return Fr}},{key:"DefaultType",get:function(){return Br}},{key:"NAME",get:function(){return"tooltip"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),r}(),qr=(e(Rr),_objectSpread(_objectSpread({},Rr.Default),{},{content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"})),Wr=_objectSpread(_objectSpread({},Rr.DefaultType),{},{content:"(null|string|element|function)"}),cn=function(){_inherits(n,Rr);var e=_createSuper(n);function n(){return _classCallCheck(this,n),e.apply(this,arguments)}return _createClass(n,[{key:"_isWithContent",value:function(){return this._getTitle()||this._getContent()}},{key:"_getContentForTemplate",value:function(){var e={};return _defineProperty(e,".popover-header",this._getTitle()),_defineProperty(e,".popover-body",this._getContent()),e}},{key:"_getContent",value:function(){return this._resolvePossibleFunction(this._config.content)}}],[{key:"Default",get:function(){return qr}},{key:"DefaultType",get:function(){return Wr}},{key:"NAME",get:function(){return"popover"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=n.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),n}(),ln=(e(cn),".".concat("bs.scrollspy")),zr="activate".concat(ln),Vr="click".concat(ln),un="load".concat(ln).concat(".data-api"),Kr="active",Yr="[href]",g=".nav-link",Ur="".concat(g,", ").concat(".nav-item"," > ").concat(g,", ").concat(".list-group-item"),Gr={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Xr={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"},Qr=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){return _classCallCheck(this,r),(e=n.call(this,e,t))._targetLinks=new Map,e._observableSections=new Map,e._rootElement="visible"===getComputedStyle(e._element).overflowY?null:e._element,e._activeTarget=null,e._observer=null,e._previousScrollData={visibleEntryTop:0,parentScrollTop:0},e.refresh(),e}return _createClass(r,[{key:"refresh",value:function(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();var e,t=_createForOfIteratorHelper(this._observableSections.values());try{for(t.s();!(e=t.n()).done;){var n=e.value;this._observer.observe(n)}}catch(e){t.e(e)}finally{t.f()}}},{key:"dispose",value:function(){this._observer.disconnect(),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"_configAfterMerge",value:function(e){return e.target=s(e.target)||document.body,e.rootMargin=e.offset?"".concat(e.offset,"px 0px -30%"):e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map(function(e){return Number.parseFloat(e)})),e}},{key:"_maybeEnableSmoothScroll",value:function(){var n=this;this._config.smoothScroll&&(m.off(this._config.target,Vr),m.on(this._config.target,Vr,Yr,function(e){var t=n._observableSections.get(e.target.hash);t&&(e.preventDefault(),e=n._rootElement||window,t=t.offsetTop-n._element.offsetTop,e.scrollTo?e.scrollTo({top:t,behavior:"smooth"}):e.scrollTop=t)}))}},{key:"_getNewObserver",value:function(){var t=this,e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver(function(e){return t._observerCallback(e)},e)}},{key:"_observerCallback",value:function(e){function t(e){r._previousScrollData.visibleEntryTop=e.target.offsetTop,r._process(o(e))}var n,r=this,o=function(e){return r._targetLinks.get("#".concat(e.target.id))},i=(this._rootElement||document.documentElement).scrollTop,a=i>=this._previousScrollData.parentScrollTop,s=(this._previousScrollData.parentScrollTop=i,_createForOfIteratorHelper(e));try{for(s.s();!(n=s.n()).done;){var c=n.value;if(c.isIntersecting){var l=c.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(a&&l){if(t(c),i)continue;return}a||l||t(c)}else this._activeTarget=null,this._clearActiveClass(o(c))}}catch(e){s.e(e)}finally{s.f()}}},{key:"_initializeTargetsAndObservables",value:function(){this._targetLinks=new Map,this._observableSections=new Map;var e,t=_createForOfIteratorHelper(f.find(Yr,this._config.target));try{for(t.s();!(e=t.n()).done;){var n,r=e.value;r.hash&&!i(r)&&(n=f.findOne(r.hash,this._element),o(n))&&(this._targetLinks.set(r.hash,r),this._observableSections.set(r.hash,n))}}catch(e){t.e(e)}finally{t.f()}}},{key:"_process",value:function(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),(this._activeTarget=e).classList.add(Kr),this._activateParents(e),m.trigger(this._element,zr,{relatedTarget:e}))}},{key:"_activateParents",value:function(e){if(e.classList.contains("dropdown-item"))f.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(Kr);else{var t,n=_createForOfIteratorHelper(f.parents(e,".nav, .list-group"));try{for(n.s();!(t=n.n()).done;){var r,o=t.value,i=_createForOfIteratorHelper(f.prev(o,Ur));try{for(i.s();!(r=i.n()).done;)r.value.classList.add(Kr)}catch(e){i.e(e)}finally{i.f()}}}catch(e){n.e(e)}finally{n.f()}}}},{key:"_clearActiveClass",value:function(e){e.classList.remove(Kr);var t,n=_createForOfIteratorHelper(f.find("".concat(Yr,".").concat(Kr),e));try{for(n.s();!(t=n.n()).done;)t.value.classList.remove(Kr)}catch(e){n.e(e)}finally{n.f()}}}],[{key:"Default",get:function(){return Gr}},{key:"DefaultType",get:function(){return Xr}},{key:"NAME",get:function(){return"scrollspy"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),r}(),p=(m.on(window,un,function(){var e,t=_createForOfIteratorHelper(f.find('[data-bs-spy="scroll"]'));try{for(t.s();!(e=t.n()).done;){var n=e.value;Qr.getOrCreateInstance(n)}}catch(e){t.e(e)}finally{t.f()}}),e(Qr),".".concat("bs.tab")),$r="hide".concat(p),Jr="hidden".concat(p),Zr="show".concat(p),eo="shown".concat(p),vt="click".concat(p),to="keydown".concat(p),yt="load".concat(p),no="ArrowRight",ro="ArrowDown",N="active",oo="show",n=":not(.dropdown-toggle)",_t=".nav-link".concat(n,", .list-group-item").concat(n,', [role="tab"]').concat(n),Ht='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',io="".concat(_t,", ").concat(Ht),ao=".".concat(N,'[data-bs-toggle="tab"], .').concat(N,'[data-bs-toggle="pill"], .').concat(N,'[data-bs-toggle="list"]'),so=function(){_inherits(r,t);var n=_createSuper(r);function r(e){var t;return _classCallCheck(this,r),(t=n.call(this,e))._parent=t._element.closest('.list-group, .nav, [role="tablist"]'),t._parent?(t._setInitialAttributes(t._parent,t._getChildren()),m.on(t._element,to,function(e){return t._keydown(e)}),t):_possibleConstructorReturn(t)}return _createClass(r,[{key:"show",value:function(){var e,t,n=this._element;this._elemIsActive(n)||(t=(e=this._getActiveElem())?m.trigger(e,$r,{relatedTarget:n}):null,m.trigger(n,Zr,{relatedTarget:e}).defaultPrevented)||t&&t.defaultPrevented||(this._deactivate(e,n),this._activate(n,e))}},{key:"_activate",value:function(e,t){var n=this;e&&(e.classList.add(N),this._activate(a(e)),this._queueCallback(function(){"tab"!==e.getAttribute("role")?e.classList.add(oo):(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),n._toggleDropDown(e,!0),m.trigger(e,eo,{relatedTarget:t}))},e,e.classList.contains("fade")))}},{key:"_deactivate",value:function(e,t){var n=this;e&&(e.classList.remove(N),e.blur(),this._deactivate(a(e)),this._queueCallback(function(){"tab"!==e.getAttribute("role")?e.classList.remove(oo):(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),n._toggleDropDown(e,!1),m.trigger(e,Jr,{relatedTarget:t}))},e,e.classList.contains("fade")))}},{key:"_keydown",value:function(e){var t;["ArrowLeft",no,"ArrowUp",ro].includes(e.key)&&(e.stopPropagation(),e.preventDefault(),t=[no,ro].includes(e.key),e=z(this._getChildren().filter(function(e){return!i(e)}),e.target,t,!0))&&(e.focus({preventScroll:!0}),r.getOrCreateInstance(e).show())}},{key:"_getChildren",value:function(){return f.find(io,this._parent)}},{key:"_getActiveElem",value:function(){var t=this;return this._getChildren().find(function(e){return t._elemIsActive(e)})||null}},{key:"_setInitialAttributes",value:function(e,t){this._setAttributeIfNotExists(e,"role","tablist");var n,r=_createForOfIteratorHelper(t);try{for(r.s();!(n=r.n()).done;){var o=n.value;this._setInitialAttributesOnChild(o)}}catch(e){r.e(e)}finally{r.f()}}},{key:"_setInitialAttributesOnChild",value:function(e){e=this._getInnerElement(e);var t=this._elemIsActive(e),n=this._getOuterElement(e);e.setAttribute("aria-selected",t),n!==e&&this._setAttributeIfNotExists(n,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}},{key:"_setInitialAttributesOnTargetPanel",value:function(e){var t=a(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id)&&this._setAttributeIfNotExists(t,"aria-labelledby","#".concat(e.id))}},{key:"_toggleDropDown",value:function(e,n){var r=this._getOuterElement(e);r.classList.contains("dropdown")&&((e=function(e,t){e=f.findOne(e,r);e&&e.classList.toggle(t,n)})(".dropdown-toggle",N),e(".dropdown-menu",oo),r.setAttribute("aria-expanded",n))}},{key:"_setAttributeIfNotExists",value:function(e,t,n){e.hasAttribute(t)||e.setAttribute(t,n)}},{key:"_elemIsActive",value:function(e){return e.classList.contains(N)}},{key:"_getInnerElement",value:function(e){return e.matches(io)?e:f.findOne(io,e)}},{key:"_getOuterElement",value:function(e){return e.closest(".nav-item, .list-group-item")||e}}],[{key:"NAME",get:function(){return"tab"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError('No method named "'.concat(t,'"'));e[t]()}})}}]),r}(),w=(m.on(document,vt,Ht,function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),i(this)||so.getOrCreateInstance(this).show()}),m.on(window,yt,function(){var e,t=_createForOfIteratorHelper(f.find(ao));try{for(t.s();!(e=t.n()).done;){var n=e.value;so.getOrCreateInstance(n)}}catch(e){t.e(e)}finally{t.f()}}),e(so),".".concat("bs.toast")),co="mouseover".concat(w),lo="mouseout".concat(w),uo="focusin".concat(w),fo="focusout".concat(w),po="hide".concat(w),ho="hidden".concat(w),mo="show".concat(w),go="shown".concat(w),vo="show",yo="showing",_o={animation:"boolean",autohide:"boolean",delay:"number"},bo={animation:!0,autohide:!0,delay:5e3},rn=function(){_inherits(r,t);var n=_createSuper(r);function r(e,t){return _classCallCheck(this,r),(e=n.call(this,e,t))._timeout=null,e._hasMouseInteraction=!1,e._hasKeyboardInteraction=!1,e._setListeners(),e}return _createClass(r,[{key:"show",value:function(){var e=this;m.trigger(this._element,mo).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove("hide"),R(this._element),this._element.classList.add(vo,yo),this._queueCallback(function(){e._element.classList.remove(yo),m.trigger(e._element,go),e._maybeScheduleHide()},this._element,this._config.animation))}},{key:"hide",value:function(){var e=this;this.isShown()&&!m.trigger(this._element,po).defaultPrevented&&(this._element.classList.add(yo),this._queueCallback(function(){e._element.classList.add("hide"),e._element.classList.remove(yo,vo),m.trigger(e._element,ho)},this._element,this._config.animation))}},{key:"dispose",value:function(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(vo),_get(_getPrototypeOf(r.prototype),"dispose",this).call(this)}},{key:"isShown",value:function(){return this._element.classList.contains(vo)}},{key:"_maybeScheduleHide",value:function(){var e=this;!this._config.autohide||this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout(function(){e.hide()},this._config.delay))}},{key:"_onInteraction",value:function(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}t?this._clearTimeout():(e=e.relatedTarget,this._element===e||this._element.contains(e)||this._maybeScheduleHide())}},{key:"_setListeners",value:function(){var t=this;m.on(this._element,co,function(e){return t._onInteraction(e,!0)}),m.on(this._element,lo,function(e){return t._onInteraction(e,!1)}),m.on(this._element,uo,function(e){return t._onInteraction(e,!0)}),m.on(this._element,fo,function(e){return t._onInteraction(e,!1)})}},{key:"_clearTimeout",value:function(){clearTimeout(this._timeout),this._timeout=null}}],[{key:"Default",get:function(){return bo}},{key:"DefaultType",get:function(){return _o}},{key:"NAME",get:function(){return"toast"}},{key:"jQueryInterface",value:function(t){return this.each(function(){var e=r.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'.concat(t,'"'));e[t](this)}})}}]),r}();return he(rn),e(rn),{Alert:be,Button:xe,Carousel:Xe,Collapse:st,Dropdown:A,Modal:fr,Offcanvas:D,Popover:cn,ScrollSpy:Qr,Tab:so,Toast:rn,Tooltip:Rr}}),function(e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(("undefined"!=typeof globalThis?globalThis:self).Popper={})}(function(e){function _(e){var t;return null==e?window:"[object Window]"!==e.toString()?(t=e.ownerDocument)&&t.defaultView||window:e}function m(e){return e instanceof _(e).Element||e instanceof Element}function c(e){return e instanceof _(e).HTMLElement||e instanceof HTMLElement}function i(e){return"undefined"!=typeof ShadowRoot&&(e instanceof _(e).ShadowRoot||e instanceof ShadowRoot)}var C=Math.max,E=Math.min,b=Math.round;function a(){var e=navigator.userAgentData;return null!=e&&e.brands?e.brands.map(function(e){return e.brand+"/"+e.version}).join(" "):navigator.userAgent}function A(){return!/^((?!chrome|android).)*safari/i.test(a())}function f(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var r=e.getBoundingClientRect(),o=1,i=1;t&&c(e)&&(o=0<e.offsetWidth&&b(r.width)/e.offsetWidth||1,i=0<e.offsetHeight&&b(r.height)/e.offsetHeight||1);t=(m(e)?_(e):window).visualViewport,e=!A()&&n,n=(r.left+(e&&t?t.offsetLeft:0))/o,e=(r.top+(e&&t?t.offsetTop:0))/i,t=r.width/o,o=r.height/i;return{width:t,height:o,top:e,right:n+t,bottom:e+o,left:n,x:n,y:e}}function d(e){e=_(e);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function l(e){return e?(e.nodeName||"").toLowerCase():null}function w(e){return((m(e)?e.ownerDocument:e.document)||window.document).documentElement}function p(e){return f(w(e)).left+d(e).scrollLeft}function k(e){return _(e).getComputedStyle(e)}function u(e){var e=k(e),t=e.overflow,n=e.overflowX,e=e.overflowY;return/auto|scroll|overlay|hidden/.test(t+e+n)}function q(e,t,n){void 0===n&&(n=!1);var r=c(t),o=c(t)&&(a=(o=t).getBoundingClientRect(),i=b(a.width)/o.offsetWidth||1,a=b(a.height)/o.offsetHeight||1,1!==i||1!==a),i=w(t),a=f(e,o,n),e={scrollLeft:0,scrollTop:0},s={x:0,y:0};return!r&&n||("body"===l(t)&&!u(i)||(e=(r=t)!==_(r)&&c(r)?{scrollLeft:r.scrollLeft,scrollTop:r.scrollTop}:d(r)),c(t)?((s=f(t,!0)).x+=t.clientLeft,s.y+=t.clientTop):i&&(s.x=p(i))),{x:a.left+e.scrollLeft-s.x,y:a.top+e.scrollTop-s.y,width:a.width,height:a.height}}function W(e){var t=f(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function s(e){return"html"===l(e)?e:e.assignedSlot||e.parentNode||(i(e)?e.host:null)||w(e)}function g(e,t){void 0===t&&(t=[]);var n=function e(t){return 0<=["html","body","#document"].indexOf(l(t))?t.ownerDocument.body:c(t)&&u(t)?t:e(s(t))}(e),e=n===(null==(e=e.ownerDocument)?void 0:e.body),r=_(n),r=e?[r].concat(r.visualViewport||[],u(n)?n:[]):n,n=t.concat(r);return e?n:n.concat(g(s(r)))}function o(e){return c(e)&&"fixed"!==k(e).position?e.offsetParent:null}function T(e){for(var t,n=_(e),r=o(e);r&&(t=r,0<=["table","td","th"].indexOf(l(t)))&&"static"===k(r).position;)r=o(r);return(!r||"html"!==l(r)&&("body"!==l(r)||"static"!==k(r).position))&&(r||function(e){var t=/firefox/i.test(a()),n=/Trident/i.test(a());if(!n||!c(e)||"fixed"!==k(e).position){var r=s(e);for(i(r)&&(r=r.host);c(r)&&["html","body"].indexOf(l(r))<0;){var o=k(r);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return r;r=r.parentNode}}return null}(e))||n}var S="top",L="bottom",j="right",P="left",I="auto",D=[S,L,j,P],N="start",O="end",z="clippingParents",V="viewport",h="popper",K="reference",Y=D.reduce(function(e,t){return e.concat([t+"-"+N,t+"-"+O])},[]),U=[].concat(D,[I]).reduce(function(e,t){return e.concat([t,t+"-"+N,t+"-"+O])},[]),G=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function X(e){var n=new Map,r=new Set,o=[];return e.forEach(function(e){n.set(e.name,e)}),e.forEach(function(e){r.has(e.name)||!function t(e){r.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach(function(e){r.has(e)||(e=n.get(e))&&t(e)}),o.push(e)}(e)}),o}function v(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return[].concat(n).reduce(function(e,t){return e.replace(/%s/,t)},e)}var y='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',Q='Popper: modifier "%s" requires "%s", but "%s" modifier is not available',$=["name","enabled","phase","fn","effect","requires","options"];function M(e){return e.split("-")[0]}function J(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&i(n)){var r=t;do{if(r&&e.isSameNode(r))return!0}while(r=r.parentNode||r.host)}return!1}function Z(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ee(e,t,n){return t===V?Z((o=n,a=_(r=e),s=w(r),a=a.visualViewport,c=s.clientWidth,s=s.clientHeight,u=l=0,a&&(c=a.width,s=a.height,(i=A())||!i&&"fixed"===o)&&(l=a.offsetLeft,u=a.offsetTop),{width:c,height:s,x:l+p(r),y:u})):m(t)?((o=f(i=t,!1,"fixed"===(o=n))).top=o.top+i.clientTop,o.left=o.left+i.clientLeft,o.bottom=o.top+i.clientHeight,o.right=o.left+i.clientWidth,o.width=i.clientWidth,o.height=i.clientHeight,o.x=o.left,o.y=o.top,o):Z((a=w(e),c=w(a),s=d(a),l=null==(l=a.ownerDocument)?void 0:l.body,r=C(c.scrollWidth,c.clientWidth,l?l.scrollWidth:0,l?l.clientWidth:0),u=C(c.scrollHeight,c.clientHeight,l?l.scrollHeight:0,l?l.clientHeight:0),a=-s.scrollLeft+p(a),s=-s.scrollTop,"rtl"===k(l||c).direction&&(a+=C(c.clientWidth,l?l.clientWidth:0)-r),{width:r,height:u,x:a,y:s}));var r,o,i,a,s,c,l,u}function te(n,e,t,r){var o,i="clippingParents"===e?(a=g(s(i=n)),m(o=0<=["absolute","fixed"].indexOf(k(i).position)&&c(i)?T(i):i)?a.filter(function(e){return m(e)&&J(e,o)&&"body"!==l(e)}):[]):[].concat(e),a=[].concat(i,[t]),e=a[0],t=a.reduce(function(e,t){t=ee(n,t,r);return e.top=C(t.top,e.top),e.right=E(t.right,e.right),e.bottom=E(t.bottom,e.bottom),e.left=C(t.left,e.left),e},ee(n,e,r));return t.width=t.right-t.left,t.height=t.bottom-t.top,t.x=t.left,t.y=t.top,t}function H(e){return e.split("-")[1]}function ne(e){return 0<=["top","bottom"].indexOf(e)?"x":"y"}function re(e){var t,n=e.reference,r=e.element,e=e.placement,o=e?M(e):null,e=e?H(e):null,i=n.x+n.width/2-r.width/2,a=n.y+n.height/2-r.height/2;switch(o){case S:t={x:i,y:n.y-r.height};break;case L:t={x:i,y:n.y+n.height};break;case j:t={x:n.x+n.width,y:a};break;case P:t={x:n.x-r.width,y:a};break;default:t={x:n.x,y:n.y}}var s=o?ne(o):null;if(null!=s){var c="y"===s?"height":"width";switch(e){case N:t[s]=t[s]-(n[c]/2-r[c]/2);break;case O:t[s]=t[s]+(n[c]/2-r[c]/2)}}return t}function oe(){return{top:0,right:0,bottom:0,left:0}}function ie(e){return Object.assign({},oe(),e)}function ae(n,e){return e.reduce(function(e,t){return e[t]=n,e},{})}function F(e,t){var r,t=t=void 0===t?{}:t,n=t.placement,n=void 0===n?e.placement:n,o=t.strategy,o=void 0===o?e.strategy:o,i=t.boundary,i=void 0===i?z:i,a=t.rootBoundary,a=void 0===a?V:a,s=t.elementContext,s=void 0===s?h:s,c=t.altBoundary,c=void 0!==c&&c,t=t.padding,t=void 0===t?0:t,t=ie("number"!=typeof t?t:ae(t,D)),l=e.rects.popper,c=e.elements[c?s===h?K:h:s],c=te(m(c)?c:c.contextElement||w(e.elements.popper),i,a,o),i=f(e.elements.reference),a=re({reference:i,element:l,strategy:"absolute",placement:n}),o=Z(Object.assign({},l,a)),l=s===h?o:i,u={top:c.top-l.top+t.top,bottom:l.bottom-c.bottom+t.bottom,left:c.left-l.left+t.left,right:l.right-c.right+t.right},a=e.modifiersData.offset;return s===h&&a&&(r=a[n],Object.keys(u).forEach(function(e){var t=0<=[j,L].indexOf(e)?1:-1,n=0<=[S,L].indexOf(e)?"y":"x";u[e]+=r[n]*t})),u}var se="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",ce={placement:"bottom",modifiers:[],strategy:"absolute"};function le(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some(function(e){return!(e&&"function"==typeof e.getBoundingClientRect)})}function t(e){var e=e=void 0===e?{}:e,t=e.defaultModifiers,p=void 0===t?[]:t,t=e.defaultOptions,h=void 0===t?ce:t;return function(a,s,t){void 0===t&&(t=h);var n,r,c={placement:"bottom",orderedModifiers:[],options:Object.assign({},ce,h),modifiersData:{},elements:{reference:a,popper:s},attributes:{},styles:{}},l=[],u=!1,f={state:c,setOptions:function(e){var n,t,r,o,i,e="function"==typeof e?e(c.options):e,e=(d(),c.options=Object.assign({},h,c.options,e),c.scrollParents={reference:m(a)?g(a):a.contextElement?g(a.contextElement):[],popper:g(s)},e=[].concat(p,c.options.modifiers),t=e.reduce(function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e},{}),e=Object.keys(t).map(function(e){return t[e]}),n=X(e),G.reduce(function(e,t){return e.concat(n.filter(function(e){return e.phase===t}))},[])),e=(c.orderedModifiers=e.filter(function(e){return e.enabled}),e=[].concat(e,c.options.modifiers),o=function(e){return e.name},i=new Set,e.filter(function(e){e=o(e);if(!i.has(e))return i.add(e),!0})),e=((r=e).forEach(function(n){[].concat(Object.keys(n),$).filter(function(e,t,n){return n.indexOf(e)===t}).forEach(function(e){switch(e){case"name":"string"!=typeof n.name&&console.error(v(y,String(n.name),'"name"','"string"','"'+String(n.name)+'"'));break;case"enabled":"boolean"!=typeof n.enabled&&console.error(v(y,n.name,'"enabled"','"boolean"','"'+String(n.enabled)+'"'));break;case"phase":G.indexOf(n.phase)<0&&console.error(v(y,n.name,'"phase"',"either "+G.join(", "),'"'+String(n.phase)+'"'));break;case"fn":"function"!=typeof n.fn&&console.error(v(y,n.name,'"fn"','"function"','"'+String(n.fn)+'"'));break;case"effect":null!=n.effect&&"function"!=typeof n.effect&&console.error(v(y,n.name,'"effect"','"function"','"'+String(n.fn)+'"'));break;case"requires":null==n.requires||Array.isArray(n.requires)||console.error(v(y,n.name,'"requires"','"array"','"'+String(n.requires)+'"'));break;case"requiresIfExists":Array.isArray(n.requiresIfExists)||console.error(v(y,n.name,'"requiresIfExists"','"array"','"'+String(n.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+n.name+'" modifier, valid properties are '+$.map(function(e){return'"'+e+'"'}).join(", ")+'; but "'+e+'" was provided.')}n.requires&&n.requires.forEach(function(t){null==r.find(function(e){return e.name===t})&&console.error(v(Q,String(n.name),t,t))})})}),M(c.options.placement)!==I||c.orderedModifiers.find(function(e){return"flip"===e.name})||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" ")),k(s));return[e.marginTop,e.marginRight,e.marginBottom,e.marginLeft].some(function(e){return parseFloat(e)})&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" ")),c.orderedModifiers.forEach(function(e){var t=e.name,n=e.options,e=e.effect;"function"==typeof e&&(e=e({state:c,name:t,instance:f,options:void 0===n?{}:n}),l.push(e||function(){}))}),f.update()},forceUpdate:function(){if(!u){var e=c.elements,t=e.reference,e=e.popper;if(le(t,e)){c.rects={reference:q(t,T(e),"fixed"===c.options.strategy),popper:W(e)},c.reset=!1,c.placement=c.options.placement,c.orderedModifiers.forEach(function(e){return c.modifiersData[e.name]=Object.assign({},e.data)});for(var n,r,o,i=0,a=0;a<c.orderedModifiers.length;a++){if(100<(i+=1)){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}!0===c.reset?(c.reset=!1,a=-1):(n=(o=c.orderedModifiers[a]).fn,r=o.options,o=o.name,"function"==typeof n&&(c=n({state:c,options:void 0===r?{}:r,name:o,instance:f})||c))}}else console.error(se)}},update:(n=function(){return new Promise(function(e){f.forceUpdate(),e(c)})},function(){return r=r||new Promise(function(e){Promise.resolve().then(function(){r=void 0,e(n())})})}),destroy:function(){d(),u=!0}};return le(a,s)?f.setOptions(t).then(function(e){!u&&t.onFirstUpdate&&t.onFirstUpdate(e)}):console.error(se),f;function d(){l.forEach(function(e){return e()}),l=[]}}}var x={passive:!0};var n={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=(e=e.options).scroll,o=void 0===r||r,i=void 0===(r=e.resize)||r,a=_(t.elements.popper),s=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&s.forEach(function(e){e.addEventListener("scroll",n.update,x)}),i&&a.addEventListener("resize",n.update,x),function(){o&&s.forEach(function(e){e.removeEventListener("scroll",n.update,x)}),i&&a.removeEventListener("resize",n.update,x)}},data:{}};var r={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,e=e.name;t.modifiersData[e]=re({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},ue={top:"auto",right:"auto",bottom:"auto",left:"auto"};function fe(e){var t,n,r,o=e.popper,i=e.popperRect,a=e.placement,s=e.variation,c=e.offsets,l=e.position,u=e.gpuAcceleration,f=e.adaptive,d=e.roundOffsets,e=e.isFixed,p=c.x,p=void 0===p?0:p,h=c.y,h=void 0===h?0:h,m="function"==typeof d?d({x:p,y:h}):{x:p,y:h},m=(p=m.x,h=m.y,c.hasOwnProperty("x")),c=c.hasOwnProperty("y"),g=P,v=S,y=window,o=(f&&(n="clientHeight",t="clientWidth",(r=T(o))===_(o)&&"static"!==k(r=w(o)).position&&"absolute"===l&&(n="scrollHeight",t="scrollWidth"),a!==S&&(a!==P&&a!==j||s!==O)||(v=L,h=(h-((e&&r===y&&y.visualViewport?y.visualViewport.height:r[n])-i.height))*(u?1:-1)),a!==P&&(a!==S&&a!==L||s!==O)||(g=j,p=(p-((e&&r===y&&y.visualViewport?y.visualViewport.width:r[t])-i.width))*(u?1:-1))),Object.assign({position:l},f&&ue)),e=!0===d?(a=(n={x:p,y:h}).x,n=n.y,s=window.devicePixelRatio||1,{x:b(a*s)/s||0,y:b(n*s)/s||0}):{x:p,y:h};return p=e.x,h=e.y,u?Object.assign({},o,((r={})[v]=c?"0":"",r[g]=m?"0":"",r.transform=(y.devicePixelRatio||1)<=1?"translate("+p+"px, "+h+"px)":"translate3d("+p+"px, "+h+"px, 0)",r)):Object.assign({},o,((t={})[v]=c?h+"px":"",t[g]=m?p+"px":"",t.transform="",t))}var de={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,e=e.options,n=void 0===(n=e.gpuAcceleration)||n,r=void 0===(r=e.adaptive)||r,e=void 0===(e=e.roundOffsets)||e,o=k(t.elements.popper).transitionProperty||"",n=(r&&["transform","top","right","bottom","left"].some(function(e){return 0<=o.indexOf(e)})&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" ")),{placement:M(t.placement),variation:H(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:n,isFixed:"fixed"===t.options.strategy});null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,fe(Object.assign({},n,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:e})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,fe(Object.assign({},n,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:e})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var pe={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var o=e.state;Object.keys(o.elements).forEach(function(e){var t=o.styles[e]||{},n=o.attributes[e]||{},r=o.elements[e];c(r)&&l(r)&&(Object.assign(r.style,t),Object.keys(n).forEach(function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)}))})},effect:function(e){var r=e.state,o={popper:{position:r.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(r.elements.popper.style,o.popper),r.styles=o,r.elements.arrow&&Object.assign(r.elements.arrow.style,o.arrow),function(){Object.keys(r.elements).forEach(function(e){var t=r.elements[e],n=r.attributes[e]||{},e=Object.keys((r.styles.hasOwnProperty(e)?r.styles:o)[e]).reduce(function(e,t){return e[t]="",e},{});c(t)&&l(t)&&(Object.assign(t.style,e),Object.keys(n).forEach(function(e){t.removeAttribute(e)}))})}},requires:["computeStyles"]};var he={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var a=e.state,t=e.options,e=e.name,s=void 0===(t=t.offset)?[0,0]:t,t=U.reduce(function(e,t){var n,r,o,i;return e[t]=(t=t,n=a.rects,r=s,o=M(t),i=0<=[P,S].indexOf(o)?-1:1,t=(n="function"==typeof r?r(Object.assign({},n,{placement:t})):r)[0]||0,r=(n[1]||0)*i,0<=[P,j].indexOf(o)?{x:r,y:t}:{x:t,y:r}),e},{}),n=(r=t[a.placement]).x,r=r.y;null!=a.modifiersData.popperOffsets&&(a.modifiersData.popperOffsets.x+=n,a.modifiersData.popperOffsets.y+=r),a.modifiersData[e]=t}},me={left:"right",right:"left",bottom:"top",top:"bottom"};function B(e){return e.replace(/left|right|bottom|top/g,function(e){return me[e]})}var ge={start:"end",end:"start"};function ve(e){return e.replace(/start|end/g,function(e){return ge[e]})}var ye={name:"flip",enabled:!0,phase:"main",fn:function(e){var f=e.state,t=e.options,e=e.name;if(!f.modifiersData[e]._skip){for(var n=t.mainAxis,r=void 0===n||n,n=t.altAxis,o=void 0===n||n,n=t.fallbackPlacements,d=t.padding,p=t.boundary,h=t.rootBoundary,i=t.altBoundary,a=t.flipVariations,m=void 0===a||a,g=t.allowedAutoPlacements,a=f.options.placement,t=M(a),n=n||(t===a||!m?[B(a)]:M(n=a)===I?[]:(t=B(n),[ve(n),t,ve(t)])),s=[a].concat(n).reduce(function(e,t){return e.concat(M(t)===I?(n=f,r=(e=e=void 0===(e={placement:t,boundary:p,rootBoundary:h,padding:d,flipVariations:m,allowedAutoPlacements:g})?{}:e).placement,o=e.boundary,i=e.rootBoundary,a=e.padding,s=e.flipVariations,c=void 0===(e=e.allowedAutoPlacements)?U:e,l=H(r),e=l?s?Y:Y.filter(function(e){return H(e)===l}):D,0===(r=e.filter(function(e){return 0<=c.indexOf(e)})).length&&(r=e,console.error(["Popper: The `allowedAutoPlacements` option did not allow any","placements. Ensure the `placement` option matches the variation","of the allowed placements.",'For example, "auto" cannot be used to allow "bottom-start".','Use "auto-start" instead.'].join(" "))),u=r.reduce(function(e,t){return e[t]=F(n,{placement:t,boundary:o,rootBoundary:i,padding:a})[M(t)],e},{}),Object.keys(u).sort(function(e,t){return u[e]-u[t]})):t);var n,r,o,i,a,s,c,l,u},[]),c=f.rects.reference,l=f.rects.popper,u=new Map,v=!0,y=s[0],_=0;_<s.length;_++){var b=s[_],w=M(b),k=H(b)===N,O=0<=[S,L].indexOf(w),x=O?"width":"height",A=F(f,{placement:b,boundary:p,rootBoundary:h,altBoundary:i,padding:d}),O=O?k?j:P:k?L:S,k=(c[x]>l[x]&&(O=B(O)),B(O)),x=[];if(r&&x.push(A[w]<=0),o&&x.push(A[O]<=0,A[k]<=0),x.every(function(e){return e})){y=b,v=!1;break}u.set(b,x)}if(v)for(var C=m?3:1;0<C;C--)if("break"===function(t){var e=s.find(function(e){e=u.get(e);if(e)return e.slice(0,t).every(function(e){return e})});if(e)return y=e,"break"}(C))break;f.placement!==y&&(f.modifiersData[e]._skip=!0,f.placement=y,f.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function R(e,t,n){return C(e,E(t,n))}var _e={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i,a,s,c,l,u=e.state,f=e.options,e=e.name,d=void 0===(d=f.mainAxis)||d,p=void 0!==(p=f.altAxis)&&p,h=f.boundary,m=f.rootBoundary,g=f.altBoundary,v=f.padding,y=void 0===(y=f.tether)||y,f=void 0===(f=f.tetherOffset)?0:f,h=F(u,{boundary:h,rootBoundary:m,padding:v,altBoundary:g}),m=M(u.placement),g=!(v=H(u.placement)),_=ne(m),b="x"===_?"y":"x",w=u.modifiersData.popperOffsets,k=u.rects.reference,O=u.rects.popper,f="number"==typeof(f="function"==typeof f?f(Object.assign({},u.rects,{placement:u.placement})):f)?{mainAxis:f,altAxis:f}:Object.assign({mainAxis:0,altAxis:0},f),x=u.modifiersData.offset?u.modifiersData.offset[u.placement]:null,A={x:0,y:0};w&&(d&&(d="y"===_?"height":"width",a=(s=w[_])+h[n="y"===_?S:P],c=s-h[l="y"===_?L:j],t=y?-O[d]/2:0,o=(v===N?k:O)[d],v=v===N?-O[d]:-k[d],i=u.elements.arrow,i=y&&i?W(i):{width:0,height:0},n=(r=u.modifiersData["arrow#persistent"]?u.modifiersData["arrow#persistent"].padding:oe())[n],r=r[l],l=R(0,k[d],i[d]),i=g?k[d]/2-t-l-n-f.mainAxis:o-l-n-f.mainAxis,o=g?-k[d]/2+t+l+r+f.mainAxis:v+l+r+f.mainAxis,g=(n=u.elements.arrow&&T(u.elements.arrow))?"y"===_?n.clientTop||0:n.clientLeft||0:0,v=s+o-(t=null!=(d=null==x?void 0:x[_])?d:0),l=R(y?E(a,s+i-t-g):a,s,y?C(c,v):c),w[_]=l,A[_]=l-s),p&&(r="y"==b?"height":"width",o=(n=w[b])+h["x"===_?S:P],d=n-h["x"===_?L:j],i=-1!==[S,P].indexOf(m),g=null!=(t=null==x?void 0:x[b])?t:0,a=i?o:n-k[r]-O[r]-g+f.altAxis,v=i?n+k[r]+O[r]-g-f.altAxis:d,s=y&&i?(c=R(c=a,n,l=v),l<c?l:c):R(y?a:o,n,y?v:d),w[b]=s,A[b]=s-n),u.modifiersData[e]=A)},requiresIfExists:["offset"]};var be={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n,r,o,i=e.state,a=e.name,e=e.options,s=i.elements.arrow,c=i.modifiersData.popperOffsets,l=ne(u=M(i.placement)),u=0<=[P,j].indexOf(u)?"height":"width";s&&c&&(e=e.padding,n=i,n=ie("number"!=typeof(e="function"==typeof e?e(Object.assign({},n.rects,{placement:n.placement})):e)?e:ae(e,D)),e=W(s),o="y"===l?S:P,r="y"===l?L:j,t=i.rects.reference[u]+i.rects.reference[l]-c[l]-i.rects.popper[u],c=c[l]-i.rects.reference[l],s=(s=T(s))?"y"===l?s.clientHeight||0:s.clientWidth||0:0,o=n[o],n=s-e[u]-n[r],o=R(o,r=s/2-e[u]/2+(t/2-c/2),n),i.modifiersData[a]=((s={})[l]=o,s.centerOffset=o-r,s))},effect:function(e){var t=e.state;null==(e=void 0===(e=e.options.element)?"[data-popper-arrow]":e)||"string"==typeof e&&!(e=t.elements.popper.querySelector(e))||(c(e)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" ")),J(t.elements.popper,e)?t.elements.arrow=e:console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" ")))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function we(e,t,n){return{top:e.top-t.height-(n=void 0===n?{x:0,y:0}:n).y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function ke(t){return[S,j,L,P].some(function(e){return 0<=t[e]})}var Oe={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,e=e.name,n=t.rects.reference,r=t.rects.popper,o=t.modifiersData.preventOverflow,i=F(t,{elementContext:"reference"}),a=F(t,{altBoundary:!0}),i=we(i,n),n=we(a,r,o),a=ke(i),r=ke(n);t.modifiersData[e]={referenceClippingOffsets:i,popperEscapeOffsets:n,isReferenceHidden:a,hasPopperEscaped:r},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":a,"data-popper-escaped":r})}},xe=t({defaultModifiers:[n,r,de,pe]}),Ae=[n,r,de,pe,he,ye,_e,be,Oe],Ce=t({defaultModifiers:Ae});e.applyStyles=pe,e.arrow=be,e.computeStyles=de,e.createPopper=Ce,e.createPopperLite=xe,e.defaultModifiers=Ae,e.detectOverflow=F,e.eventListeners=n,e.flip=ye,e.hide=Oe,e.offset=he,e.popperGenerator=t,e.popperOffsets=r,e.preventOverflow=_e,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
